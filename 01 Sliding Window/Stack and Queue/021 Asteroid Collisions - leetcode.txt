/*
Striver explanation - chatgpt soln
Problem Statement (LeetCode 735)

You are given an integer array asteroids of size n representing asteroids in a row.
Each asteroid moves at the same speed.
The value of asteroids[i] represents its size and direction:
  -  Positive → moving to the right
  - Negative → moving to the left

Asteroids collide if they are moving towards each other (right meets left).
  -  When two asteroids collide, the smaller one explodes.
  -  If they are the same size, both explode.
  - Asteroids moving in the same direction never collide.

Only if the current stack peek is lesser than or equals to the absolute value of negative element to be added, 
we can pop the current stack peek, otherwise the current stack peek stays
if(stack.peek()> 0 && a<0) {
  stack.peek() <= abs(a) , then only need to pop
}
*/


import java.util.*;

public class AsteroidCollision {

    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> stack = new Stack<>();

        for (int a : asteroids) {
            boolean exploded = false;

            // Only possible collision is when stack top is moving right and current is moving left
            while (!stack.isEmpty() && stack.peek() > 0 && a < 0) {
                int top = stack.peek();

                if (top < -a) { 
                    // Top asteroid explodes
                    stack.pop();
                    continue;  // check the next top for collision, 
                               //if a is very large negative number this continue will go on, removing everything in the stack
                } else if (top == -a) {
                    // Both asteroids explode
                    stack.pop();
                    exploded = true;
                    break;
                } else {
                    // Current asteroid explodes
                    exploded = true;
                    break;
                }
            }

            if (!exploded) {
                stack.push(a);
            }
        }

        // Convert stack to array
        int[] result = new int[stack.size()];
        for (int i = stack.size() - 1; i >= 0; i--) {
            result[i] = stack.pop();
        }

        return result;
    }

    public static void main(String[] args) {
        AsteroidCollision solution = new AsteroidCollision();
        
        int[] asteroids = {5, 10, -5};
        System.out.println(Arrays.toString(solution.asteroidCollision(asteroids))); // [5, 10]

        int[] asteroids2 = {8, -8};
        System.out.println(Arrays.toString(solution.asteroidCollision(asteroids2))); // []

        int[] asteroids3 = {10, 2, -5};
        System.out.println(Arrays.toString(solution.asteroidCollision(asteroids3))); // [10]

        int[] asteroids4 = {-2, -1, 1, 2};
        System.out.println(Arrays.toString(solution.asteroidCollision(asteroids4))); // [-2, -1, 1, 2]
    }
}
