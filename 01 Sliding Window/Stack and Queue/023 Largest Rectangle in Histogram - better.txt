/*
Given an array of integers heights representing the histogram's bar heights where the width of each bar is 1, 
return the area of the largest rectangle that can be formed in the histogram.

Striver explanation - chatgpt soln
Max Area at the current a[i] equals to 
height = a[i]
width  = nse - pse - 1
nse - next occurence of smaller than current height
pse - previous occurence of smaller than current height

PSE
From front to back, maintain 
When we push values onto the stack, they go in increasing order, but the stack top to bottom represents a monotonic decreasing order of elements. so stack wise  - a monotonic decreasing stack
      /
    /
  /
/

NSE
From back to front, when we push, we push increasing squence of elements, 
but the stack wise top to bottom it is monotonic decreasing as well
\
  \
    \
      \
*/


import java.util.*;

public class LargestRectangleHistogram {

    // Function to find largest rectangle area
    public int largestRectangleArea(int[] heights) {
        int n = heights.length;
        
        int[] pse = previousSmallerElement(heights);
        int[] nse = nextSmallerElement(heights);
        
        int maxArea = 0;
        
        for (int i = 0; i < n; i++) {
            int width = nse[i] - pse[i] - 1;
            int area = heights[i] * width;
            maxArea = Math.max(maxArea, area);
        }
        
        return maxArea;
    }
    
    // Previous Smaller Element (Index)
    private int[] previousSmallerElement(int[] heights) {
        int n = heights.length;
        int[] pse = new int[n];
        Stack<Integer> stack = new Stack<>();
        
        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }
            pse[i] = stack.isEmpty() ? -1 : stack.peek();
            stack.push(i);
        }
        
        return pse;
    }
    
    // Next Smaller Element (Index)
    private int[] nextSmallerElement(int[] heights) {
        int n = heights.length;
        int[] nse = new int[n];
        Stack<Integer> stack = new Stack<>();
        
        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && heights[stack.peek()] >= heights[i]) {
                stack.pop();
            }
            nse[i] = stack.isEmpty() ? n : stack.peek();
            stack.push(i);
        }
        
        return nse;
    }
    
    // Test
    public static void main(String[] args) {
        LargestRectangleHistogram solution = new LargestRectangleHistogram();
        int[] heights = {2, 1, 5, 6, 2, 3};
        
        System.out.println(solution.largestRectangleArea(heights)); // Output: 10
    }
}
