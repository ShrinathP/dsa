//https://takeuforward.org/data-structure/implement-stack-using-single-queue/
//Striver Explanation

/*
Take a single queue.
- push(x): Push the element in the queue.
- Use a for loop of size()-1, remove element from queue and again push back to the queue, 
hence the most recent element becomes the most former element and vice versa.
- pop(): remove the element from the queue.
- top(): show the element at the top of the queue.
- size(): size of the current queue.
*/

import java.util.*;

public class tuf {

    public static void main(String[] args) {
        stack s = new stack();
        s.push(3);
        s.push(2);
        s.push(4);
        s.push(1);
        System.out.println("Top of the stack: " + s.top());
        System.out.println("Size of the stack before removing element: " + s.size());
        System.out.println("The deleted element is: " + s.pop());
        System.out.println("Top of the stack after removing element: " + s.top());
        System.out.println("Size of the stack after removing element: " + s.size());
    }

}
class stack {
    Queue < Integer > q = new LinkedList < > ();
    void push(int x) {
//add the element to the queue
        q.add(x);
//observe how we are leaving the last element we just added to the queue
        for (int i = 0; i < q.size() - 1; i++) {
            q.add(q.remove());
        }
    }
    int pop() {
        return q.remove();
    }
    int top() {
        return q.peek();
    }
    int size() {
        return q.size();
    }
}
