// Implement Stack using 2 Queues - Leetcode 73
//chatgpt soln
/*
We are using queue2 as a helper queue, and queue1 is the main queue
- Push Operation: 
Add the new element to queue2, then move all elements from queue1 to queue2. 
Now queue2 has the latest added element at the front and previous added element at last - (Like stack)
After this, swap queue1 and queue2 so that the latest element is at the front of queue1.
Now queue1 satisfies the stack property

At every point we are, adding first to queue2, emptying queue1 into queue2, swapping both queues

- Pop Operation: Simply dequeue from queue1 (the stack top).


*/

import java.util.*;

class StackUsingQueues {
    private Queue<Integer> queue1;
    private Queue<Integer> queue2;

    // Constructor
    public StackUsingQueues() {
        queue1 = new LinkedList<>();
        queue2 = new LinkedList<>();
    }

    // Push operation (add element to the stack)
    public void push(int value) {
        // Push to queue2
        queue2.add(value);

        // Move all elements from queue1 to queue2
        while (!queue1.isEmpty()) {
            queue2.add(queue1.poll());
        }

        // Swap queue1 and queue2
        Queue<Integer> temp = queue1;
        queue1 = queue2;
        queue2 = temp;
    }

    // Pop operation (remove element from the stack)
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack is Empty");
            return -1;
        }
        return queue1.poll();
    }

    // Peek operation (view top element)
    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is Empty");
            return -1;
        }
        return queue1.peek();
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return queue1.isEmpty();
    }
}

// Demo
public class Main {
    public static void main(String[] args) {
        StackUsingQueues stack = new StackUsingQueues();

        stack.push(10);
        stack.push(20);
        stack.push(30);

        System.out.println(stack.pop());  // 30
        System.out.println(stack.peek()); // 20
        stack.push(40);
        System.out.println(stack.pop());  // 40
    }
}
