
//GFG deque
//Time complexity O(n) and O(k) space complexity as we are holding in Deque

//Explanation
//Yogesh & Shailesh (CodeLibrary)
//Solution chatgpt

import java.util.*;

public class FirstNegativeInWindow {

    public static List<Integer> firstNegativeInWindow(int[] arr, int k) {
        List<Integer> result = new ArrayList<>();
        Deque<Integer> deque = new ArrayDeque<>(); // stores indices of negative numbers

        int n = arr.length;
        for (int i = 0; i < n; i++) {
            // Add current element's index if it's negative
            if (arr[i] < 0) {
                deque.addLast(i);
            }

            // Remove indices that are out of the current window
            if (!deque.isEmpty() && deque.peekFirst() <= i - k) {
                deque.pollFirst();
            }

            // Start adding results after first k elements
            if (i >= k - 1) {
                if (!deque.isEmpty()) {
                    result.add(arr[deque.peekFirst()]);
                } else {
                    result.add(0); // no negative number in this window
                }
            }
        }

        return result;
    }

    // Test
    public static void main(String[] args) {
        int[] arr = {12, -1, -7, 8, 15, 30, 16, 28};
        int k = 3;
        List<Integer> result = firstNegativeInWindow(arr, k);
        System.out.println(result);  // Output: [-1, -1, -7, 0, 0, 0]
    }
}

