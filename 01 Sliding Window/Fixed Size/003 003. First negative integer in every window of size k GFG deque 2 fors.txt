/*
GFG Solution 


We create a Dequeue, dq of capacity k,
that stores only useful elements of the current window of k elements. 
An element is useful if it is in the current window and it is a negative integer. 
We process all array elements one by one and 
maintain dq to contain useful elements of current window and these useful elements are all negative integers. 
For a particular window, if dq is not empty then the element at front of the dq is the first negative integer for that window, 
else that window does not contain a negative integer.

*/

import java.util.*;

public class GfG {
    public static int[] firstNegInt(int[] arr, int k) {
        Deque<Integer> dq = new LinkedList<>();
        List<Integer> res = new ArrayList<>();
        int n = arr.length;

        // Process first k (or first window) elements 
        for (int i = 0; i < k; i++)
            if (arr[i] < 0)
                dq.addLast(i);

        // Process rest of the elements, i.e., 
        // from arr[k] to arr[n-1]
        for (int i = k; i < n; i++) {
            if (!dq.isEmpty())
                res.add(arr[dq.peekFirst()]);
            else
                res.add(0);
            
            // Remove the elements which are out of 
            // this window
            while (!dq.isEmpty() && dq.peekFirst() < (i - k + 1))
                dq.pollFirst();
            // the while above can be replaced by if
            
            // Add current element at the rear 
            // of dq if it is a negative integer
            if (arr[i] < 0)
                dq.addLast(i);
        }
        
        // Print the first negative integer of 
        // the last window
        if (!dq.isEmpty())
            res.add(arr[dq.peekFirst()]);
        else
            res.add(0);
        
        return res.stream().mapToInt(i -> i).toArray();
    }

    public static void main(String[] args) {
        int[] arr = {12, -1, -7, 8, -15, 30, 16, 28};
        int k = 3;
        int[] result = firstNegInt(arr, k);
        
        // Print the result in the required format
        System.out.print(Arrays.toString(result));
    }
}
