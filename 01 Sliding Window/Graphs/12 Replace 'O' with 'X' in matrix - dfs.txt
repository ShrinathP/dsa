
/*
DFS Solution
Striver Explanation - striver code

Given a matrix where every element is either ‘O’ or ‘X’, 
replace 'O' with 'X' if surrounded by 'X'. 
A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations 
just below, just above, just left, and just right of it. 

O Should be surrounded by X on all sides, not even 1 side should be missing

Time Complexity - DFS - in the worst case - for all Os in a matrix -DFS will run for O(NXM)X4 directions
and for loops will run for O(N)
So O(N) row traverse + O(N) col traverse + O(NXMX4) DFS + NXM (filling all inner elements)
*/


class Solution {
    static void dfs(int row, int col, int vis[][], char mat[][], int delRow[], int delCol[]) {
        vis[row][col] = 1;
        int m = mat.length;
        int n = mat[0].length;

        // check for top, right, bottom, left
        for (int i = 0; i < 4; i++) {
            int nRow = row + delRow[i];
            int nCol = col + delCol[i];

            if (nRow >= 0 && nRow < m && nCol >= 0 && nCol < n && vis[nRow][nCol] == 0 && mat[nRow][nCol] == 'O') {
                dfs(nRow, nCol, vis, mat, delRow, delCol);
            }
        }
    }

    static char[][] fill(int n, int m, char mat[][]) {
        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};
        int vis[][] = new int[n][m];

        // traverse first row and last row
        for (int j = 0; j < m; j++) {
            // first row
            if (mat[0][j] == 'O' && vis[0][j] == 0) {
                dfs(0, j, vis, mat, delRow, delCol);
            }

            // last row
            if (mat[n - 1][j] == 'O' && vis[n - 1][j] == 0) {
                dfs(n - 1, j, vis, mat, delRow, delCol);
            }
        }

        for (int i = 0; i < n; i++) {
            // first column
            if (mat[i][0] == 'O' && vis[i][0] == 0) {
                dfs(i, 0, vis, mat, delRow, delCol);
            }
            // last column
            if (mat[i][m - 1] == 'O' && vis[i][m - 1] == 0) {
                dfs(i, m - 1, vis, mat, delRow, delCol);
            }
        }

// for all the inner elements, 
// replace the O with X
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (vis[i][j] == 0 && mat[i][j] == 'O') {
                    mat[i][j] = 'X';
                }
            }
        }

        return mat;
    }
}
