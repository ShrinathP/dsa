/*
Striver Explanation and code

if not visited and is an island then run bfs

bfs using queue and 2 for loops for eight directions
-------------------------------------------------------
in bfs create a queue - put the current row, col value
while queue is not empty, poll the record, and fill all its neighbours in the queue

Imp: traverse in eight neighbours - use 2 for loops 
delrow ranging from -1 to 1
delcol ranging from -1 to 1
*/


import java.util.*;

class Pair {
    int first, second;
    Pair(int first, int second) { this.first = first; this.second = second; }
}

class Solution {
//bfs using queue and 2 for loops for eight directions
    private void bfs(int ro, int co, int[][] vis, char[][] grid) {
        vis[ro][co] = 1;
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(ro, co));

        int n = grid.length, m = grid[0].length;

        while (!q.isEmpty()) {
            int row = q.peek().first;
            int col = q.peek().second;
            q.remove();

            // traverse 8 neighbors
            for (int delrow = -1; delrow <= 1; delrow++) {
                for (int delcol = -1; delcol <= 1; delcol++) {
                    int nrow = row + delrow;
                    int ncol = col + delcol;

                    if (nrow >= 0 && nrow < n && ncol >= 0 && ncol < m
                            && grid[nrow][ncol] == '1' && vis[nrow][ncol] == 0) {
                        vis[nrow][ncol] = 1;
                        q.add(new Pair(nrow, ncol));
                    }
                }
            }
        }
    }

    // Function to find the number of islands
    public int numIslands(char[][] grid) {
        int n = grid.length, m = grid[0].length;
        int[][] vis = new int[n][m];
        int cnt = 0;

        for (int row = 0; row < n; row++) {
            for (int col = 0; col < m; col++) {
// if not visited and is an island then run bfs
                if (vis[row][col] == 0 && grid[row][col] == '1') {
                    cnt++;
                    bfs(row, col, vis, grid);
                }
            }
        }
        return cnt;
    }
}

