/*
Chatgpt solution
Solution using BFS - 

1. Traverse the first row and last row - 
  - check for any Os , if any O present, run bfs - check for more adjacent Os, and mark all as visited

2. Traverse the first column and last column - 
  - check for any Os , if any O present, run bfs - check for more adjacent Os, and mark all as visited

3. For all inner Os, which arent visited yet, mark it as X

4. BFS Algorithm
Use Queue inside the bfs algorithm
  - add to the Queue the current element
  - ,poll the queue, check in all 4 directions

TC will be the same as the dfs solution
*/


import java.util.*;

class Solution {
    static void bfs(int row, int col, int vis[][], char mat[][], int delRow[], int delCol[]) {
        int m = mat.length;
        int n = mat[0].length;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{row, col});
        vis[row][col] = 1;

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int r = current[0], c = current[1];

            // check for top, right, bottom, left
            for (int i = 0; i < 4; i++) {
                int nRow = r + delRow[i];
                int nCol = c + delCol[i];

                if (nRow >= 0 && nRow < m && nCol >= 0 && nCol < n && vis[nRow][nCol] == 0 && mat[nRow][nCol] == 'O') {
                    queue.offer(new int[]{nRow, nCol});
                    vis[nRow][nCol] = 1;
                }
            }
        }
    }

    static char[][] fill(int n, int m, char mat[][]) {
        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};
        int vis[][] = new int[n][m];

        // traverse first row and last row
        for (int j = 0; j < m; j++) {
            // first row
            if (mat[0][j] == 'O' && vis[0][j] == 0) {
                bfs(0, j, vis, mat, delRow, delCol);
            }

            // last row
            if (mat[n - 1][j] == 'O' && vis[n - 1][j] == 0) {
                bfs(n - 1, j, vis, mat, delRow, delCol);
            }
        }

        // traverse first column and last column
        for (int i = 0; i < n; i++) {
            // first column
            if (mat[i][0] == 'O' && vis[i][0] == 0) {
                bfs(i, 0, vis, mat, delRow, delCol);
            }

            // last column
            if (mat[i][m - 1] == 'O' && vis[i][m - 1] == 0) {
                bfs(i, m - 1, vis, mat, delRow, delCol);
            }
        }

        // mark all unvisited 'O' as 'X'
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (vis[i][j] == 0 && mat[i][j] == 'O') {
                    mat[i][j] = 'X';
                }
            }
        }

        return mat;
    }
}
