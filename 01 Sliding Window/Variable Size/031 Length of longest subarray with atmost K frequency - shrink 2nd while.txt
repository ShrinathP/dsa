//codestorywithMIK
//Approach-1 (With Nested Loop - Classic Sliding Window Template)
//T.C : O(n)
//S.C : O(n)
// shrink front with while

class Solution {
    public int maxSubarrayLength(int[] nums, int k) {
         int n = nums.length;
        Map<Integer, Integer> mp = new HashMap<>();
        int i = 0;
        int j = 0;
        int result = 0;

        //iterate
        while(j < n) {
            //Keep increasing the frequency map
            mp.put(nums[j], mp.getOrDefault(nums[j], 0) + 1);

            // Shrink window if this number exceeds k frequency
            while(i < j && mp.getOrDefault(nums[j],0) > k) {
                mp.put(nums[i], mp.getOrDefault(nums[i], 0) - 1);
                //Below commented portion is not required but good to remove the key record fully
                /*
                if(map.get(nums[i]) == 0) {
                    map.remove(nums[i]);
                }
                */

                i++;
            }
            
            result = Math.max(result, j - i + 1);
            j++;
        }
        
        return result;
    }
}
