//cue - prefixsum - map of sum and indices
//325 locked
/*
Problem description:
Given an array arr[] of size n containing integers, the task is to find the length of the longest subarray having sum equal to the given value k.

Check GFG Solution and Explanation on this website
https://www.geeksforgeeks.org/dsa/longest-sub-array-sum-k/

Explanation
===========
The idea is based on the fact that if Sj - Si = k (where Si and Sj are prefix sums till index i and j respectively, and  i < j), then the subarray between i+1 to j has sum equal to k. 
For example, arr[] = [5, 2, -3, 4, 7] and k = 3.  The value of S3 - S0= 3,  it means the subarray from index 1 to 3 has sum equals to 3. 

So we mainly compute prefix sums in the array and store these prefix sums in a hash table. And check if current prefix sum - k is already present. If current prefix sum - k is present in the hash table and is mapped to index j, then subarray from j to current index has sum equal to k.

*/

/*
1.
Run a for loop
keep adding sum, and keep storing its index in a Map
[1,3,4,2,1,3]

2.
So Map will contain sum, index pairs
{1, 0}
{4, 2}

3.
at any point check if there is already a (sum - k) key
if yes, currentindex - map.get(sum - k) will be the length of subarray
*/


// Java program to find longest sub-array having sum k
// using Hash Map and Prefix Sum

import java.util.HashMap;
import java.util.Map;

class GfG {
  
  	// Function to find longest sub-array having sum k
    static int longestSubarray(int[] arr, int k) {
        Map<Integer, Integer> mp = new HashMap<>();
        int res = 0;
        int prefSum = 0;

        for (int i = 0; i < arr.length; ++i) {
            prefSum += arr[i];

			// Check if the entire prefix sums to k - if the current prefixSums to k then add to the result
            if (prefSum == k) 
                res = i + 1;

            // If prefixSum - k exists in the map then there exist such 
      		// subarray from (index of previous prefix + 1) to current i. - which sums to k
            else if (mp.containsKey(prefSum - k)) 
                res = Math.max(res, i - mp.get(prefSum - k));

            // Store only first occurrence index of prefSum
            if (!mp.containsKey(prefSum))
                mp.put(prefSum, i);
        }

        return res;
    }

    public static void main(String[] args) {
        int[] arr = {10, 5, 2, 7, 1, -10};
        int k = 15;
        System.out.println(longestSubarray(arr, k));
    }
}
