class Solution {

//Time complexity Order(N cube)
    //Extended 2 sum problem
    //Take u forward
    //use two for loops for first 2 numbers
    //use two sum for the next 2 numbers
    public List<List<Integer>> fourSum(int[] nums, int target) {
     
        ArrayList<List<Integer>> result = new ArrayList<List<Integer>>();
        
        int n = nums.length;
        Arrays.sort(nums); //to use 2 pointer we need to sort nums
        
        for(int i = 0; i < n; i++){
            for(int j = i+1; j < n; j++){
                int target_2 = target - nums[i] - nums[j];
                int front = j+1; //3rd number
                int back = n-1; //4th number
                
                while(front < back){
                    int two_sum = nums[front] + nums[back];
                    if(two_sum > target_2){
                        back--;
                    }
                    else if(two_sum < target_2){
                        front++;
                    }
                    else{
                        //sum matches target sum
                        ArrayList<Integer> quad = new ArrayList<>();
                        quad.add(nums[i]);
                        quad.add(nums[j]);
                        quad.add(nums[front]);
                        quad.add(nums[back]);
                        result.add(quad);
                        
                        
                        //processing the duplicates of number 3 and 4 front and back
                        //keep on moving front if we have same numbers
                        //eg [1,4,2*,2,2,3*,4] we move front from first 2* till 3*

//another way to skip duplicates
//check for the first added element in quad

//below whiles will run at least once
//as front and quad2 are the same

                        while(front < back && nums[front] == quad.get(2)) ++front;
                        
                        while(front < back && nums[back] == quad.get(3)) --back;

			/*
			while(front < back && nums[front] == nums[front+1]) front++;
                        while(front < back && nums[back] == nums[back-1]) back--;
			front++;
			back--;
			*/
                        
                    }
                }
                //processing duplicates of number 2
                ////eg [1,4,2*,2,2*,3,4]
                while(j+1 < n && nums[j+1] == nums[j])++j;
                //we need to move j till the last duplicate no as j++ of for loop
                //will automatically increment j to the unique number
                
            }
            while(i+1 < n && nums[i+1] == nums[i])++i;
        }
        return result;
        
    }
}