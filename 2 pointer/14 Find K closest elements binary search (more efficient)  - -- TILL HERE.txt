//https://leetcode.com/problems/find-k-closest-elements/discuss/106426/JavaC%2B%2BPython-Binary-Search-O(log(N-K)-%2B-K)
//Very good explanation
//At any point of time 
//1. We find a mid
//2. Run a binary Search to find the left most part of the window K
// See visualiation in solution
//If distance of x from mid is greater than mid+k

//Time COmplexity O(logN) binary search
// move left
// NOTE == consider x is in the middle of A[mid] and A[mid + k]
//consider hi as length - K as we only need to find the left index
class Solution {
    //https://leetcode.com/problems/find-k-closest-elements/discuss/106426/JavaC%2B%2BPython-Binary-Search-O(log(N-K)-%2B-K)
     public List<Integer> findClosestElements(int[] A, int k, int x) {
        int left = 0, right = A.length - k;
        while (left < right) {
            int mid = (left + right) / 2;
            if (x - A[mid] > A[mid + k] - x)
                left = mid + 1;
            else
                right = mid;
        }
        return Arrays.stream(A, left, left + k).boxed().collect(Collectors.toList());
    }
}