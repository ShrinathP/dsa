
//Put odd numbers to odd places
//and even numbers to even places
//Input : arr[] = {3, 6, 12, 1, 5, 8}
//Output : 6 3 12 1 8 5 
public static void processedArr(int[] arr) {


	int[] res = new int[arr.length];
ArrayList<Integer> reseven = new ArrayList<>();
ArrayList<Integer> resodd = new ArrayList<>();

	for(int i=0; i<arr.length ; i++) {
		if(nums[i] % 2 == 0) {
			reseven.add(nums[i]);	//reseven = 6,12,8
		} else if(nums[i] % 2 !=0) {
			resodd.add(nums[i]);   //resodd = 3,1,5	
		}	
	}

	int evenindex = 0;
	int oddindex = 0;
	for(int i=0; i<arr.length ; i++) { 
		if(i % 2 == 0) {			
		arr[i] = reseven.get(evenindex++);  //arr[0] = 6, arr[2]= 12, arr[4] = 8
		}
		else {
		arr[i] = resodd.get(oddindex++);  //arr[1] = 3, arr[3] = 1, arr[5] = 5
		}
	}

}

//1st input
=============
//Input : arr[] = {3, 6, 12, 1, 5, 8}
//Output : 6 3 12 1 8 5 

//1st swap
////Input : arr[] = {6, 3, 12, 1, 5, 8}

//2nd swap
////Input : arr[] = {6, 3, 12, 1, 8, 5}


//2nd input
===========
Input : arr[] = {10, 9, 7, 18, 13, 19, 4, 20, 21, 14}
Output : 10 9 18 7 20 19 4 13 14 21 

//1st swap
{10, 9, 18, 7, 13, 19, 4, 20, 21, 14}

//2nd swap
{10, 9, 18, 7, 19, 13, 4, 20, 21, 14}

13 15 19 21 4
4 15 19 21 13



public static void processedArr(int[] arr) {
	
	for(int i=0, i< arr.length; i++) {
		int swapend = i+1;
		if(nums[i] % 2 == 0 && i % 2 != 0) {
//move ahead to skip all the even numbers
			while(nums[swapend] % 2 == 0) {
				swapend++;
			}

			swap(nums, i, swapend);
		}
		else if(nums[i] % 2 != 0 && i % 2 == 0) {
//move ahead to skip all the odd numbers
			while(nums[swapend] % 2 != 0) {
				swapend++;
			}

			swap(nums, i, swapend);
		}
	}

}


public void swap(int[] arr, int i, int j) {
	int temp = nums[i];
	int nums[i] = nums[j];
	int nums[j] = temp;	
}

