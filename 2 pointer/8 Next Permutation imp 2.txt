//Next Permutation
class Solution {
    public void nextPermutation(int[] nums) {
        if(nums == null || nums.length <=1) return;
        
        //1
        //traverse from back, in increasing order/ flat order
        int i = nums.length - 1 - 1;
        while(i >= 0 && nums[i] >= nums[i+1]){
            i--;
        }
        //breaks we found the first decresing sequence from back
        
        //if there is no decreasing sequence, just reverse
        if(i>=0){
        //2
        //traverse again and find number just greater than i
            int j = nums.length - 1;
            while(nums[j] <= nums[i]){
                j--;
            }
            //breaks when we found number greater than i
            
            //3
            //swap
            swap(nums, i , j);
        }
        
        //4
        //reverse from i to n
        reverse(nums, i+1, nums.length -1);
    }
    
    private static void swap(int[] nums, int i, int j){
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    private static void reverse(int[] nums, int start, int end){
        while(start < end){
            swap(nums, start++, end--);
        }
        
    }
}