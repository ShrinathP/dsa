//1st way
//Nick white
//1. Reverse all the numbers
//2. Reverse first k numbers
//3. Reverse last n-k numbers 

class Solution {
    public void rotate(int[] nums, int k) {
        //to avoid the cases where the length of the array is less than k
        //then we need to avoid rotating the array multiple times
        k = k % nums.length;
        
        reverse(nums, 0, nums.length-1);
        reverse(nums, 0, k-1);
        reverse(nums, k, nums.length-1);
        
    }
    
    public void reverse(int[] nums, int start, int end) {
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
}


//2nd way
//Copy into a new array nums[i]
//Edit the original array where we put i+k th element as nums[i]
//TC O(n) Space Complexity O(n)

class Solution {
    public void rotate(int[] nums, int k) {
        int n=nums.length;
        int[] arr = new int[n];
        for(int i=0; i<n; i++) {
            arr[i] = nums[i];
        }
        
        for(int i=0; i<n; i++) {
            nums[(i+k) % n] = arr[i];
        }
    }
}
