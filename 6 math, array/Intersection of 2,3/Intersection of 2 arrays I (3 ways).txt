/*
Note we have to find only unique intersection numbers
3 java solutions
1. Using 2 Hashsets
2. Using sort and 2 pointers
3. Using binary search

https://leetcode.com/problems/intersection-of-two-arrays/discuss/81969/Three-Java-Solutions
*/

//1st way
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set = new HashSet<>();
        Set<Integer> intersect = new HashSet<>();
        
        for(int num: nums1){
            set.add(num);
        }
        
        for(int num: nums2) {
            if(set.contains(num)) {
                intersect.add(num);
            }
        }
        
        int result[] = new int[intersect.size()];
        int i = 0;
        for(Integer num: intersect) {
              result[i++] = num;
        }
        
        return result;
    }
}



//2nd way O(nlogn)
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set = new HashSet<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        int i = 0;
        int j = 0;
        
        while(i < nums1.length && j< nums2.length) {
            if(nums1[i] < nums2[j]){
                i++;
            } else if(nums1[i] > nums2[j]){
                j++;
            } else {
                //both are equal
                //add to set
                set.add(nums1[i]);
                    i++;
                    j++;
                }
            }
            
            int[] result = new int[set.size()];
            int k = 0;
            for(Integer num: set){
                result[k++] = num;
            }
            
            return result;
        }
    }


//3rd way(O(nlogn))
//Very goood binary search way
//Sort one array and run binary search on the sorted array
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Set<Integer> set = new HashSet<>();
        Arrays.sort(nums2);
        
        for(int num : nums1){
            if(binarySearch(nums2, num)){
                set.add(num);
            }
        }
        
        int i = 0;
        int[] result = new int[set.size()];
        for (Integer num : set) {
            result[i++] = num;
        }
        return result;
        }
    
    
    private boolean binarySearch(int[] nums, int target){
        int low = 0;
        int high = nums.length -1;
        while(low <= high) {
            int mid = low + (high - low)/2;
            
            //here we checked mid
            if(nums[mid] == target){
                return true;
            }
            
            //so moving high/low to mid-1 or mid + 1
            if(nums[mid] > target){
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return false;
        
        }
    }