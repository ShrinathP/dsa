//2 ways
/*
Algorithms made easy
1. Skip nodes of the longer list
Find the length of both linked lists
Find the difference between both lists
In the longer list skip the difference
and start traversion in both LLs
*/

//Nick white
//2nd way
//Here whenever we reach end for a_pointer , we assign headB to it
//whenever we reach end for b_pointer, we assign headA to it

//This compensates for the difference in the length of 2 LinkedLists
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        if(headA == null || headB == null){
            return null;
        }
        
        ListNode a_pointer = headA;
        ListNode b_pointer = headB;
        
        while(a_pointer != b_pointer){
            if(a_pointer == null){
                a_pointer = headB;
            } else {
                a_pointer = a_pointer.next;
            }
            
            if(b_pointer == null){
                b_pointer = headA;
            } else {
                b_pointer = b_pointer.next;
            }
            
        }
        
        return a_pointer;
        
    }
}