class Solution {
    /*
    Start at every index of the string and expand from middle
    */
    public String longestPalindrome(String s) {
        if(s == null || s.length() < 1) return "";
        
        int start_index = 0;
        int end_index = 0;
        int max = 0;
        
        for(int i=0; i<s.length(); i++){
            int len1 = expandFromMiddle(s, i, i); 
            // for strings like racecar where e is middle
            int len2 = expandFromMiddle(s, i, i+1);
            // for strings with 2 middles eg cabbac
            int len = Math.max(len1, len2);
            //setting new start and end indices if we find len to 
            //be greater than the difference
            if(len > end_index - start_index){
                start_index = i - (len-1)/2;
                end_index = i + len/2;
            }
        }
        return s.substring(start_index, end_index + 1);
        
    }
    
    //write an expandFromMiddle function to check
    //for palindrome
    public int expandFromMiddle(String s, int left, int right){
        if(s == null || left > right) return 0;
        
        while(left >= 0 && right<s.length() && s.charAt(left) == s.charAt(right)){
            left --;
            right ++;
        }
        return right - left - 1; //length of the matched substring
    }
}