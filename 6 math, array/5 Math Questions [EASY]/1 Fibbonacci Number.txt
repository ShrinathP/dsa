//Dynamic Programming Top down approach
//Check bottom up also here
//https://leetcode.com/problems/fibonacci-number/discuss/215992/Java-Solutions
//Time complexity O N , space complexity O N

//Basic recursion will not have dp array, TC will be O n square

class Solution {
    //Algorithms made easy
    
    //create a dp array
    int[] dp = new int[31];
    
    public int fib(int n) {
        if(n<= 1) return n;
        
        if(dp[n] > 0){
            //we have already memoized fibonacci
            return dp[n];
        }
        
        dp[n] = fib(n-1) + fib(n-2);
        return dp[n];
        
    }
}