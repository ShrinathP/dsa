//Naresh Gupta
//Recursion + memo
//There are repeated subproblems hence we can cache the results of
//repeated subproblems

/* Other good soln
Bottom up solutions
https://leetcode.com/problems/word-break/discuss/44054/Java-DP-solution
https://leetcode.com/problems/word-break/discuss/44011/Java-solution-using-DP

Good explanation
https://www.youtube.com/watch?v=1U4jQusbeJc
*/
class Solution {
    Map<String, Boolean> map = new HashMap();
    
    public boolean wordBreak(String s, List<String> wordDict) {
        if(wordDict.contains(s)){
            return true;
        }
        
//memo
        if(map.containsKey(s)){
            return map.get(s);
        }
        
//for index from 0 to i
//check if left substring present if present
//call recursively on the right part

        for(int i=1; i<=s.length(); i++){
            String left = s.substring(0, i);
            if(wordDict.contains(left) && wordBreak(s.substring(i), wordDict)) {
                map.put(s, true);
                return true;
            }
        }
        map.put(s, false);
        return false;
        
    }
}