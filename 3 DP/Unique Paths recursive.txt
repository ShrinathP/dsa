class Solution {
    public int uniquePaths(int m, int n) {
        /*
        //recursive solution , gfg
        
        if(m==1 || n==1){
            return 1;
        }
        
        return uniquePaths(m-1,n) + uniquePaths(m,n-1);
        
        */
        
        int currentRow = 0;
        int currentCol = 0;
        int[][] dpp = new int[n][m];
        
        System.out.println(m + "_" + n);
        for(int[] arr: dpp){
            Arrays.fill(arr,-1);
        }
        return recursion(0, 0, n, m, dpp);
        
    }
    
    private int recursion(int i, int j, int n, int m, int[][] dp){
        if(i==(n-1) && j==(m-1)) return 1;
        if(i>=n || j>=m) return 0;
        
        System.out.println(i + "_ij_" + j);
        if(dp[i][j]!=-1) return dp[i][j];
        else return dp[i][j] = recursion(i+1, j,n,m, dp) + recursion(i, j+1,n, m, dp);
    }
}