
//Implement Stack using Single queue
//Same logic as striver, just that we are getting the size earlier only before adding the element to the queue

import java.util.*;

class StackUsingQueue {
    private Queue<Integer> queue;

    // Constructor
    public StackUsingQueue() {
        queue = new LinkedList<>();
    }

    // Push operation (add element to the stack)
    public void push(int value) {
        int size = queue.size();
        // Add the new element to the queue
        queue.add(value);

        // Rotate the elements in the queue to ensure the last inserted element is at the front
        for (int i = 0; i < size; i++) {
            queue.add(queue.poll());
        }
    }

    // Pop operation (remove element from the stack)
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack is Empty");
            return -1;
        }
        return queue.poll();  // Remove the element from the front (top of the stack)
    }

    // Peek operation (view top element)
    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is Empty");
            return -1;
        }
        return queue.peek();  // Look at the front element (top of the stack)
    }

    // Check if the stack is empty
    public boolean isEmpty() {
        return queue.isEmpty();
    }
}

// Demo
public class Main {
    public static void main(String[] args) {
        StackUsingQueue stack = new StackUsingQueue();

        stack.push(10);
        stack.push(20);
        stack.push(30);

        System.out.println(stack.pop());  // 30
        System.out.println(stack.peek()); // 20
        stack.push(40);
        System.out.println(stack.pop());  // 40
    }
}
