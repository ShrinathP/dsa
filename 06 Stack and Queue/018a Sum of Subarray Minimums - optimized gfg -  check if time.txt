/*
Here we keep counting as we move back hold the count in left
Keep counting as we move front, hold the count in right


https://www.geeksforgeeks.org/dsa/sum-of-minimum-elements-of-all-subarrays/
The idea is to determine for each element arr[i], how many subarrays it is the minimum of, and then using that count to calculate its total contribution.
To do this efficiently:
For each element, we compute how far it can extend to the left and right while still being the minimum.

left[i] represents the number of consecutive elements to the left that are strictly greater than arr[i]. - strictly greater
right[i] represents the number of consecutive elements to the right that are greater than or equal to arr[i]. - greater than or equals
f(i) = left[i] × right[i]
=> The Contribution of arr[i] to the answer is arr[i]×left[i]×right[i]
*/



import java.util.Stack;
import java.util.Arrays;

class GfG {

    public static int sumSubMins(int[] arr) {
        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];

        Stack<int[]> s1 = new Stack<>();
        Stack<int[]> s2 = new Stack<>();

        // Count elements greater 
        // than arr[i] on the left
        for (int i = 0; i < n; i++) {
            
            // get elements from stack until element 
           // greater to arr[i] found
            int count = 1;
            while (!s1.isEmpty() && s1.peek()[0] > arr[i]) {
                count += s1.pop()[1];
            }
            s1.push(new int[]{arr[i], count});
            left[i] = count;
        }

        // Count elements greater than 
        // or equal to arr[i] on the right
        for (int i = n - 1; i >= 0; i--) {
            
            // get elements from stack until element 
            // greater or equal to arr[i] found
            int count = 1;
            while (!s2.isEmpty() && s2.peek()[0] >= arr[i]) {
                count += s2.pop()[1];
            }
            s2.push(new int[]{arr[i], count});
            right[i] = count;
        }

        int result = 0;
        for (int i = 0; i < n; i++) {
            result += arr[i] * left[i] * right[i];
        }

        return result;
    }

    public static void main(String[] args) {
        int[] arr = {3, 1, 2, 4};
        System.out.println(sumSubMins(arr));  
    }
}
