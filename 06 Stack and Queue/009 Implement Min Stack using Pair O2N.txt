// Problem Statement: Implement Min Stack | O(2N) and O(N) Space Complexity.
// Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
// Approach: The first element in the pair will store the value and the second element will store the minimum element till now.
// Striver Explanation and SOln 
// https://takeuforward.org/data-structure/implement-min-stack-o2n-and-on-space-complexity/

/*
Logic
Compute min while pushing - 
  if stack is empty min will be current value, else min = Math.min(stack.peek.val, value)
GetMin - 
  will be min value stored in the stack peek pair
*/
  
class Pair {
    int x, y;
    Pair(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
class MinStack {
    Stack < Pair > st;
    public MinStack() {
        st = new Stack < > ();
    }

//imp
    public void push(int x) {
        int min;
        if (st.isEmpty()) {
            min = x;
        } else {
            min = Math.min(st.peek().y, x);
        }
        st.push(new Pair(x, min));
    }

    public void pop() {
        st.pop();
    }

    public int top() {
        return st.peek().x;
    }

    public int getMin() {
        return st.peek().y;
    }
}
