class Solution {
    //Pre order traversal
    //Root left-(go deep left if present) right
    
    /*
    Logic GFG
1) Create an empty stack nodeStack and push root node to stack. 
2) Do the following while nodeStack is not empty. 
….a) Pop an item from the stack and print it. 
….b) Push right child of a popped item to stack 
….c) Push left child of a popped item to stack
The right child is pushed before the left child to make sure that the left subtree is processed first.
    */
    public List<Integer> preorderTraversal(TreeNode root) {
        
        List<Integer> result = new ArrayList<>();
        
        //Base Case
        if(root == null) return result;
        
        // Create an empty stack and push root to it
        Stack<TreeNode> nodeStack = new Stack<>();
        nodeStack.push(root);
        
        /* Pop all items one by one. Do following for every popped item
         a) print it
         b) push its right child
         c) push its left child
         Note that right child is pushed first so that left is processed first */
        
        while(nodeStack.isEmpty() == false){
            
            //pop the top item and print
            TreeNode mynode = nodeStack.peek();
            result.add(mynode.val);
            nodeStack.pop();
            
            // Push right and left children of the popped node to stack
            if (mynode.right != null) {
                nodeStack.push(mynode.right);
            }
            if (mynode.left != null) {
                nodeStack.push(mynode.left);
            }
        }
        return result;
    }
}