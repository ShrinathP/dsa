//DFS way
//Take u forward

//Maintain a List of preorder values

/*
Steps
        1. First deal with the node
        2. Then recur on left subtree (go deep left)
        3. Finally recur on right subtree

*/

/*
O(H) where H is the height of the Tree
*/

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> preorder = new ArrayList<Integer>(); 
        dfs(root, preorder);
        return preorder;
    }
    
    private void dfs(TreeNode node, List<Integer> preorder) {
        if(node == null) return; 
        //root, left, right
        preorder.add(node.val); 
        dfs(node.left, preorder);
        dfs(node.right, preorder); 
    }
}
