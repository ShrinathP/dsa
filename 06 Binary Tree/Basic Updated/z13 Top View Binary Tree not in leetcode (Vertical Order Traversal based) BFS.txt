/*
Top view of Binary Tree 
Same as vertical order Traversal
Take U forward
GFG Solutions

We need 1 queue and 1 map
- Queue will hold each traversal, number and level
- The map will hold the first element number at each vertical level

-2 -1 0 1 2 (is the vertical levels)

*/


class Solution
{
    //Function to return a list of nodes visible from the top view 
    //from left to right in Binary Tree.
    static ArrayList<Integer> topView(Node root)
    {

//Holding answer
        ArrayList<Integer> ans = new ArrayList<>(); 

//if root == null return ans
        if(root == null) return ans;

//Map and Queue of Pair, add first Pair in queue
//Pair holds node and level
        Map<Integer, Integer> map = new TreeMap<>();
        Queue<Pair> q = new LinkedList<Pair>();
        q.add(new Pair(root, 0)); 


        while(!q.isEmpty()) {
            Pair it = q.remove();
            int hd = it.hd; 
            Node temp = it.node; 

//if map holds nothing at that level, put the node data there
//basically the first top view node at that level
            if(map.get(hd) == null) map.put(hd, temp.data); 

//add left and right of current to the queue
            if(temp.left != null) {
                
                q.add(new Pair(temp.left, hd - 1)); 
            }
            if(temp.right != null) {
                
                q.add(new Pair(temp.right, hd + 1)); 
            }
        }

//Print everything in the Map
        for (Map.Entry<Integer,Integer> entry : map.entrySet()) {
            ans.add(entry.getValue()); 
        }
        return ans; 
        
    }
}