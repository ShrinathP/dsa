/*tuf 
Inorder traversal
Go left,then Node, then Right


//Recursion + BAcktracking
//As we need to search for all possible ways
//where the target node is present

*/

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}


public class Solution {
    private boolean getPath(TreeNode root, ArrayList<Integer> arr, int x) {
        if(root == null) {
            return false; 
        }

        //add current node value
        arr.add(root.val);

        //if we reached then return true
        if(root.val == x) {
            return true; 
        }

        //if not, check on left then right of the current node
        if(getPath(root.left, arr, x) || getPath(root.right, arr, x)) {
            return true; 
        }

        //no x on either left or right of the node, remove the node
        arr.remove(arr.size() - 1); 
        return false; 
    }

    
    public ArrayList<Integer> solve(TreeNode A, int B) {
        ArrayList<Integer> arr = new ArrayList<>(); 
        if(A == null) return arr; 
        getPath(A, arr, B); 
        return arr; 
    }
}