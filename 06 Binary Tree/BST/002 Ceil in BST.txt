/*
Striver explanation - 

✅ Explanation:

1. Ceil in a BST = smallest node value ≥ key.
2. Traverse BST:
    If key == node.val → perfect match → return node.val.
    If key > node.val → go right.
    Else → update ceil = node.val (possible answer) → go left.
*/

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

public class Solution {

    public static int findCeil(TreeNode<Integer> root, int key) {

        int ceil = -1;
        while (root != null) {
            if (root.data == key) {
                ceil = root.data;
                return ceil;
            }

            if (key > root.data) {
                root = root.right;
            } else {
                ceil = root.data;
                root = root.left;
            }
        }
        return ceil;
    }
}

