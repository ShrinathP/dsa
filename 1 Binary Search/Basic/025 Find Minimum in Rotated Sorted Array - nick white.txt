//153 leetcode

class Solution {
    //You can combine both Nick's sol and programcreek ones
    public int findMin(int[] nums) {
        if(nums.length == 0) return -1;
        if(nums.length == 1) return nums[0];
        
        int left = 0;
        int right = nums.length -1;
        
        while(left <= right){
            //if nums[left] <= nums[right] no rotation
            if(nums[left] <= nums[right]){
                return nums[left];
            }
            int midpoint = left + (right -left)/2;
            
            //if you find discrepency at midpoint only return the minimum
            if(midpoint > 0 && nums[midpoint] < nums[midpoint-1]) {
                return nums[midpoint];
            }
            
            //left is sorted , search right
            if(nums[left] <= nums[midpoint]){
                left = midpoint + 1;
            } else {
            //right is sorted , search left
                right = midpoint;
            }
        }
        
        return nums[left];
    }
}
