//https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/discuss/1181832/JS-Python-Java-C%2B%2B-or-Easy-Binary-Search-Solution-w-Explanation

//Check this one also
//https://leetcode.com/discuss/study-guide/1233854/a-noobs-guide-to-the-binary-search-algorithm

/*
1. Find the leftmost index of the target
2. If leftIndex reaches the length, or not present, then return -1
3. For rightmost Index
- Find the next target and move one place back
*/
class Solution {
    public int[] searchRange(int[] N, int T) {
        int Tleft = find(T, N, 0);
        if (Tleft == N.length || N[Tleft] != T) return new int[] {-1, -1};
        return new int[] {Tleft, find(T+1, N, Tleft) - 1};
    }
    public int find(int target, int[] arr, int left) {
        int right = arr.length - 1;
        while (left <= right) {
            int mid = left + right >> 1;
            if (arr[mid] < target) left = mid + 1;
            else right = mid - 1;
        }
        return left;
    }
}