/*
3 solutions 
O(n3) and O(n2) check from Naresh Gupta

Naresh Gupta
O(N) Stack solution
1. Create a min array
traverse the array and fill the min value for each position
Eg [3, 1, 4, 2] min array will be [3,1,1,1]

2. Traverse from backwards
3. Create a stack and hold the number
4. Peek the stack
    1. if stack top is less than min, discard from stack
    2. if stack top is greater than min array value &&
    stack top is less than current value
    we found the triplet
    eg 1, 4, 2
    In this case
*/
class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length;
        int min[] = new int[n];
        min[0] = nums[0];
        
        //Step 1, filling min array
        for(int i=1; i<n; i++){
            min[i] = Math.min(min[i-1], nums[i]);
        }
            
        Stack<Integer> st = new Stack<>();
            
            //2
            for(int j = n-1; j>=0; j--){
                
                //4.1
                while(!st.isEmpty() && st.peek() <= min[j]){
                    //discard
                    st.pop();
                }
                
                //4.2
                //Here we are sure that stack peek is greater than min
                //we need to compare stack peek with current value
                if(!st.isEmpty() && st.peek() < nums[j]){
                    return true;
                }
                
                st.push(nums[j]);
                
            }
        
        return false;
        
    }
}