
https://www.opentechguides.com/how-to/article/java/216/count_occurrence_binarySearch.html

/*Notes:
Scalar video
https://www.youtube.com/watch?v=ze0QqSb6bHA
1st way, find the first occurence using binary search, then run a for loop until you keep finding the element
TC O(logN) + O(N) (worst case whole array is filled with the same element)

*/
//first occurence
public static int binarySearchFirst(int a[], int searchValue){
   int start = 0;		
   int end = a.length - 1;
   int mid;
   int result = -1;

   while (start <=  end) {
      mid = (start + end) / 2;

      // If searchValue found, continue searching left of the array.
      if (a[mid] == searchValue) {
         result = mid;
         end = mid-1;

      } else if (a[mid] > searchValue) {
		 end = mid - 1;

	  } else if (a[mid] < searchValue){
         start = mid + 1;
      }
  }
// Return -1 if not found
return result;
}

//last occurence
public static int binarySearchLast(int a[], int searchValue){
   int start = 0;
   int end = a.length - 1;
   int mid;
   int result = -1;
   
   // If searchValue found, continue searching right of the array.
   while (start <=  end) {
      mid = (start + end) / 2;

      if (a[mid] == searchValue){
         result = mid;
         start = mid+1;

      } else if (a[mid] > searchValue) {
         end = mid - 1;

      } else if (a[mid]  < searchValue){
         start = mid + 1;
     
      }
   }

 // Return -1 if not found
 return result;
}



public static void main(String[] args) {

      int[] my_array = {5, 5, 8, 8, 8, 15, 23, 23};

      // Value to search
      int target = 8;

      // Call binarySearch method to get first position
      int left = binarySearchFirst(my_array, target);
        
      // Call binarySearch method to get Last position
      int right = binarySearchLast(my_array, target);
        
      // Calculate count
      int count = right - left + 1;

      System.out.println("The number "+ target + " occurs " + count + " times.");
 }