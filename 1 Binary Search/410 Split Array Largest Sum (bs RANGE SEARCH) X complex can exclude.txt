class Solution {
    //happygirlzt // Binary Search
    //Find the smallest split(1) sum
    //FInd the largest split(n) sum
    //These 2 will be binary search range
    //If m = 1 return the smallest split sum
    
    //BinarySearch
    //For every mid , of sums array
    //Check the number of pieces the given array can be split into
    //if the number of pieces is > m , we need to increase the mid
    //i.e. move low
    //other wise pieces are < m , move right
    
    public int splitArray(int[] nums, int m) {
        int max = 0;
        int sum = 0;
        for (int num : nums) {
            max = Math.max(max, num);
            sum += num;
        }

        //Ranges
        int lo = max;
        int hi = sum;
        while (lo < hi) {
            int mid = lo + (hi - lo) / 2;
            int numOfSubarrays = split(nums, mid);
            if (numOfSubarrays > m) {
                lo = mid + 1;
            } else {
                hi = mid;
            }
        }

        return lo;
    }

    private int split(int[] nums, int validMaxSum) {
        int sum = 0;
        int count = 1;
        for (int num : nums) {
            if (sum + num > validMaxSum) {
                sum = num;
                count++;
            } else {
                sum += num;
            }
        }

        return count;
    }


}