
/*
Striver explanation and code
Problem Statement
Given a DAG, find the shortest path from the source to all other nodes in this DAG. 
In this problem statement, we have assumed the source vertex to be ‘0’. You will be given the weighted edges of the graph.
https://takeuforward.org/data-structure/shortest-path-in-directed-acyclic-graph-topological-sort-g-27/


The adjacency list this time will have adjacent nodes with weights
The DAG has weights so each of the path has weight
Eg
6 -> {4,1}, {5, 3}
6 has an adjacency node of 4 with weight 1
6 has an adjacency node of 5 with weight 3

Step 1
Assume any source
Do a TopoSort on the DAG any way DFS or BFS
DFS way
- Run a loop For every node of the DAG, call DFS
  - Keep a visited array, if not visited, mark visited call DFS on adjacents, keep doing the same
  - whenever a DFS call is over put it into the stack
- After all the loop is complete keep popping the stack and you will get the answer

Step 2
Take all nodes from the stack and relax the edges
- Declare a distance array, fill everything with infinity, mark the source node as 0, 
distance from source to source will be 0, and rest nodes will be infinity
For the source node 
- Check its adjacents, get the distance and update the distance array, to the min (distance, infinity)
For each subsequent node of the stack
- Check its adjacents, get the new computed distance and update the distance array, to the min (prevdistance, newcomputed_distance)
- If the subsequnct node has infinity, update the distance to min (distance, infinity)

*/


import java.util.*;
import java.lang.*;
import java.io.*;

class Main {

  public static void main(String[] args) throws IOException {
    int n = 6, m = 7;
    int[][] edge = {{0,1,2},{0,4,1},{4,5,4},{4,2,2},{1,2,3},{2,3,6},{5,3,1}};
    Solution obj = new Solution();
    int res[] = obj.shortestPath(n, m, edge);
    for (int i = 0; i < n; i++) {
      System.out.print(res[i] + " ");
    }
    System.out.println();
  }
}

class Pair {
  int first, second;
  Pair(int _first, int _second) {
    this.first = _first;
    this.second = _second;
  }
}
//User function Template for Java
class Solution {
  private void topoSort(int node, ArrayList < ArrayList < Pair >> adj,
    int vis[], Stack < Integer > st) {
    //This is the function to implement Topological sort. 

    vis[node] = 1;
    for (int i = 0; i < adj.get(node).size(); i++) {
      int v = adj.get(node).get(i).first;
      if (vis[v] == 0) {
        topoSort(v, adj, vis, st);
      }
    }
    st.add(node);
  }



  public int[] shortestPath(int N, int M, int[][] edges) {
    ArrayList < ArrayList < Pair >> adj = new ArrayList < > ();
    for (int i = 0; i < N; i++) {
      ArrayList < Pair > temp = new ArrayList < Pair > ();
      adj.add(temp);
    }
    
    // We create a graph first in the form of an adjacency list.
    // for every node, create an adjacency list, with u taking v and weights
    for (int i = 0; i < M; i++) {
      int u = edges[i][0];
      int v = edges[i][1];
      int wt = edges[i][2];
      adj.get(u).add(new Pair(v, wt));
    }
    
    // Create a visited array
    int vis[] = new int[N];
    //Now, we perform topo sort using DFS technique 
    //and store the result in the stack st.

    Stack <Integer> st = new Stack <>();
    for (int i = 0; i < N; i++) {
      if (vis[i] == 0) {
        topoSort(i, adj, vis, st);
      }
    }

    // Step 
    //Further, we declare a vector ‘dist’ in which we update the value of the nodes’
    //distance from the source vertex after relaxation of a particular node.
    int dist[] = new int[N];
    for (int i = 0; i < N; i++) {
      dist[i] = (int)(1e9);
    }

    dist[0] = 0;
    while (!st.isEmpty()) {
      int node = st.peek();
      st.pop();

//for every adjacents, update the distance array
      for (int i = 0; i < adj.get(node).size(); i++) {
        int v = adj.get(node).get(i).first;
        int wt = adj.get(node).get(i).second;

        if (dist[node] + wt < dist[v]) {
          dist[v] = wt + dist[node];
        }
      }
    }

    for (int i = 0; i < N; i++) {
      if (dist[i] == 1e9) dist[i] = -1;
    }
    return dist;
  }
}
