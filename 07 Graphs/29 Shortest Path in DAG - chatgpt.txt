//Chatgpt solution
import java.util.*;

class Solution {
    // Pair class to store (node, weight)
    static class Pair {
        int node;
        int weight;
        public Pair(int node, int weight) {
            this.node = node;
            this.weight = weight;
        }
    }

    public int[] shortestPathDAG(int N, List<List<Pair>> adj, int src) {
        // Step 1: Topological sort using DFS
        boolean[] visited = new boolean[N];
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < N; i++) {
            if (!visited[i]) dfs(i, adj, visited, stack);
        }

        // Step 2: Initialize distances
        int[] dist = new int[N];
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        // Step 3: Relax edges in topological order
        while (!stack.isEmpty()) {
            int node = stack.pop();
            if (dist[node] != Integer.MAX_VALUE) {
                for (Pair p : adj.get(node)) {
                    int neighbor = p.node;
                    int weight = p.weight;
                    if (dist[node] + weight < dist[neighbor]) {
                        dist[neighbor] = dist[node] + weight;
                    }
                }
            }
        }

        return dist;
    }

    private void dfs(int node, List<List<Pair>> adj, boolean[] visited, Stack<Integer> stack) {
        visited[node] = true;
        for (Pair p : adj.get(node)) {
            if (!visited[p.node]) dfs(p.node, adj, visited, stack);
        }
        stack.push(node);
    }
}

public class tUf {
    public static void main(String[] args) {
        int N = 6; // Number of nodes
        List<List<Solution.Pair>> adj = new ArrayList<>();
        for (int i = 0; i < N; i++) adj.add(new ArrayList<>());

        // Example weighted DAG edges: (from -> to, weight)
        adj.get(0).add(new Solution.Pair(1, 5));
        adj.get(0).add(new Solution.Pair(2, 3));
        adj.get(1).add(new Solution.Pair(3, 6));
        adj.get(1).add(new Solution.Pair(2, 2));
        adj.get(2).add(new Solution.Pair(4, 4));
        adj.get(2).add(new Solution.Pair(5, 2));
        adj.get(2).add(new Solution.Pair(3, 7));
        adj.get(3).add(new Solution.Pair(4, -1));
        adj.get(4).add(new Solution.Pair(5, -2));

        Solution sol = new Solution();
        int src = 0;
        int[] dist = sol.shortestPathDAG(N, adj, src);

        System.out.println("Shortest distances from node " + src + ":");
        for (int i = 0; i < dist.length; i++) {
            if (dist[i] == Integer.MAX_VALUE) System.out.println(i + " : INF");
            else System.out.println(i + " : " + dist[i]);
        }
    }
}
