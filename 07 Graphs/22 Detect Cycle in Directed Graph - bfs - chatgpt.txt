/*
Question 20+21 Solutions
Kahns algorithm plus detect a cycle
Chatgpt soln
*/

import java.util.*;

class Solution {
    // Function to perform Topological Sort using Kahn's Algorithm
    public List<Integer> topologicalSort(int V, List<List<Integer>> adj) {
        int[] indegree = new int[V];
        List<Integer> topo = new ArrayList<>();

        // Step 1: Calculate in-degree of each node
        for (int i = 0; i < V; i++) {
            for (int neighbor : adj.get(i)) {
                indegree[neighbor]++;
            }
        }

        // Step 2: Initialize queue with nodes having in-degree 0
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < V; i++) {
            if (indegree[i] == 0) {
                q.offer(i);
            }
        }

        // Step 3: Process nodes
        while (!q.isEmpty()) {
            int node = q.poll();
            topo.add(node);

            for (int neighbor : adj.get(node)) {
                indegree[neighbor]--;
                if (indegree[neighbor] == 0) {
                    q.offer(neighbor);
                }
            }
        }

        // Step 4: Check for cycle (optional)
        if (topo.size() != V) {
            System.out.println("Graph has a cycle! Topological sort not possible.");
            return new ArrayList<>(); // return empty list if cycle exists
        }

        return topo;
    }
}

public class tUf {
    public static void main(String[] args) {
        int V = 6;
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i < V; i++) adj.add(new ArrayList<>());

        // Example edges
        adj.get(5).add(2);
        adj.get(5).add(0);
        adj.get(4).add(0);
        adj.get(4).add(1);
        adj.get(2).add(3);
        adj.get(3).add(1);

        Solution obj = new Solution();
        List<Integer> topoOrder = obj.topologicalSort(V, adj);

        System.out.println("Topological Order:");
        for (int node : topoOrder) {
            System.out.print(node + " ");
        }
        System.out.println();
    }
}
