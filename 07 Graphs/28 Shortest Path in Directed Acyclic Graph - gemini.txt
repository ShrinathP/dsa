//google gemini solution, chatgpt soln also like this
import java.util.*;

public class ShortestPathDAG {

    static class Edge {
        int to;
        int weight;

        Edge(int to, int weight) {
            this.to = to;
            this.weight = weight;
        }
    }

    // Function to perform topological sort using DFS
    private void topologicalSortDFS(int u, List<List<Edge>> adj, boolean[] visited, Stack<Integer> stack) {
        visited[u] = true;
        for (Edge edge : adj.get(u)) {
            if (!visited[edge.to]) {
                topologicalSortDFS(edge.to, adj, visited, stack);
            }
        }
        stack.push(u); // Push node to stack after visiting all its neighbors
    }

    // Function to find shortest paths from a source node
    public int[] shortestPath(int V, List<List<Edge>> adj, int src) {
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[V];

        // Perform topological sort
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                topologicalSortDFS(i, adj, visited, stack);
            }
        }

        int[] dist = new int[V];
        Arrays.fill(dist, Integer.MAX_VALUE); // Initialize distances to infinity
        dist[src] = 0; // Distance to source is 0

        // Process vertices in topological order
        while (!stack.isEmpty()) {
            int u = stack.pop();

            // Only process if u is reachable (not MAX_VALUE)
            if (dist[u] != Integer.MAX_VALUE) {
                for (Edge edge : adj.get(u)) {
                    if (dist[u] + edge.weight < dist[edge.to]) {
                        dist[edge.to] = dist[u] + edge.weight;
                    }
                }
            }
        }

        // Replace unreachable nodes with -1 if desired
        for (int i = 0; i < V; i++) {
            if (dist[i] == Integer.MAX_VALUE) {
                dist[i] = -1;
            }
        }

        return dist;
    }

    public static void main(String[] args) {
        int V = 6; // Number of vertices
        List<List<Edge>> adj = new ArrayList<>(V);
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }

        // Add edges: u -> v with weight w
        adj.get(0).add(new Edge(1, 2));
        adj.get(0).add(new Edge(4, 1));
        adj.get(1).add(new Edge(2, 3));
        adj.get(4).add(new Edge(2, 2));
        adj.get(4).add(new Edge(5, 4));
        adj.get(2).add(new Edge(3, 6));
        adj.get(5).add(new Edge(3, 1));

        ShortestPathDAG sp = new ShortestPathDAG();
        int src = 0; // Source node
        int[] shortestDistances = sp.shortestPath(V, adj, src);

        System.out.println("Shortest paths from source " + src + ":");
        for (int i = 0; i < V; i++) {
            System.out.println("To " + i + ": " + shortestDistances[i]);
        }
    }
}
