//DFS solution + non memoization
//Algorithms made easy


//Algorithms made easy, DFS way
//For each position traverse all directions, dfs
class Solution {
    //down ,up, right, left 
    int[][] dir = {{1,0}, {-1,0}, {0,1}, {0,-1}};
    public int longestIncreasingPath(int[][] matrix) {
        if(matrix == null || matrix.length == 0 ) return 0;
        int rows= matrix.length, cols = matrix[0].length;
        int longestPath = 0;
        
        for(int i=0; i<rows; i++){
            for(int j=0; j<cols; j++){
                int path = dfs(matrix, rows, cols, i, j);
                longestPath = Math.max(path, longestPath);
            }
        }
        return longestPath;
    }
    
    public int dfs(int[][] matrix, int rows, int cols, int i, int j){
        int max = 0;
        for(int[] d: dir){
            int x = i+d[0];
            int y = j+d[1];
            
            //Checking the bounds
            //new incremented x and y should be greater than i and j
            if(x>=0 && y>=0 && x< rows && y<cols && matrix[x][y] > matrix[i][j]){
                max = Math.max(max, dfs(matrix, rows, cols, x, y));
            }
        }
        
        return max + 1;
        //adding 1 to consider the current position
        
    }
}