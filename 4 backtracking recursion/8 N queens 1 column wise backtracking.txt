/*
Tuf
Naresh Gupta , Arrays.fill

* Fill all the places by dot .
* Call a recursive function which takes 0 as column number
- in the rec function
	1. base case whenever we reach the board length - add the board to the result
	2. 2nd case, 
		- check for every row of the column	
		- check if its safe to put Q at the place
		- if safe, then add the Q at that place
		- call rec for next column
		- backtrack step, remove Q from the place

	3. isSafe function, checks for left top diagonal traversal, left straight , left bottom traversal
	4. Construct function to construct a List of row string
 
*/
class Solution {
    public List<List<String>> solveNQueens(int n) {
        
        char[][] board = new char[n][n];
        for(int i=0; i<n; i++){
            Arrays.fill(board[i], '.');
        }
        
        List<List<String>> result = new ArrayList<>();
        
        rec(0, board, result);
        return result;
    }
    
    public void rec(int col, char[][] board, List<List<String>> result) {
        //base case
        if(col == board.length){
            result.add(construct(board));
            return;
        }
        
        //traverse for every row of the column
        for(int row=0; row<board.length; row++){
            if(isSafe(board, row, col)){
                board[row][col] = 'Q';
                rec(col + 1, board, result);
                
                //backtrack
                board[row][col] = '.';
            }
        }
    }
    
    private boolean isSafe(char[][] board, int row, int col) {
        int temprow = row;
        int tempcol = col;
        
        //left top traversal
        while(row>=0 && col>=0){
            if(board[row][col] == 'Q'){
                return false;
            }
            row--;
            col--;
        }
        
        row = temprow;
        col = tempcol;
        //left straight
        while(col>=0){
            if(board[row][col] == 'Q'){
                return false;
            }
            col--;
        }
        
        row = temprow;
        col = tempcol;
        //left bottom traversal
        while(col>=0 && row< board.length){
            if(board[row][col] == 'Q') return false;
            col--;
            row++;
        }
        return true;
    }
    
    //Costruct a List of String
    private List<String> construct(char[][] board){
        List<String> res = new LinkedList<>();
        for(int i=0; i<board.length; i++) {
            //Add the whole row
            //So we have List of rows now in res
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
}