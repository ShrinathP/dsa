
/*
1. loop for each row, for each column
2. check if the content is dot
	2.1 If its dot 
	2.2 Run loop for char 1 to 9 
		2.3 Check for each digit if the number is placeable
	2.4 if it is placeable, place the number at board[i][j]
	2.5 solve the board for other places
	2.6 if solve is true, return true
	2.7 else remove the placed number (backtrack step)

Placeable function
isValid Function
For every row, column number check if 
the number can be placed 
	- along the row, 
	- along the column, 
	- along the 3*3 box
*/

class Solution {
    //Take u forward
    //As we need to find only 1 True solution, 
    //directly return true if found one
    public void solveSudoku(char[][] board) {
        if(board == null || board.length == 0)
            return;
        solve(board);
    }
    
    private boolean solve(char[][] board){
        for(int i=0; i< board.length; i++) {
            for(int j=0; j< board[0].length; j++) {
                //check if place is blank
                if(board[i][j] == '.') {
                    for(char c = '1'; c<= '9'; c++) {//trail 1 through 9
                        if(isValid(board, i, j, c)){
                            board[i][j] = c;
                            
                            //solve for next blank place
                            if(solve(board))
                                return true; 
                            //if its solution return true
                            //backtrack
                            else
                                board[i][j] = '.'; 
                            //or put back dot , to check for other paths
                            
                        }
                    }
                    //if nothing returned from for
                    return false;
                }
            }
        }
        return true;
    }
    
    
    //Checking row , column and 3*3 matrix
       private boolean isValid(char[][] board, int row, int col, char c){
        for(int i = 0; i < 9; i++) {
            if(board[i][col] != '.' && board[i][col] == c) return false; //check row
            if(board[row][i] != '.' && board[row][i] == c) return false; //check column
            if(board[3 * (row / 3) + i / 3][ 3 * (col / 3) + i % 3] != '.' && 
board[3 * (row / 3) + i / 3][3 * (col / 3) + i % 3] == c) return false; //check 3*3 block
        }
        return true;
    }
}