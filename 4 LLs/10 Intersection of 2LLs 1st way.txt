

//1st way
//Algorithms made easy
//Find the difference in lengths of both lists
//Shift the longer list by difference
//Start iterating until both nodes are not same

//Time complexity O(M + N)
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */

//1st way
//Algorithms made easy
//Other way, where we find lists
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        
        //1. Find the lengths
        //Length of ListA
        int lenA=0;
        ListNode tempA = headA;
        while(tempA != null){
            lenA++;
            tempA = tempA.next;
        }
        
        //Length of ListB
        int lenB=0;
        ListNode tempB = headB;

        while(tempB != null){
            lenB++;
            tempB = tempB.next;
        }
        
        //2. Find the difference
        int diff = Math.abs(lenA - lenB);
        
        //Iterate on larger list for diff nodes
        //keep moving on of the heads until equal length is not reached
        tempA= headA;
        tempB= headB;
        
        //3. Shift the longer LL by difference
        if(lenA > lenB){
            while(diff-- > 0){
                tempA = tempA.next;
            }
        } else {
            while(diff-- > 0){
                tempB = tempB.next;
            }
        }
        
        //4. Iterate and Check for equality
        while(tempA != tempB){
            tempA = tempA.next;
            tempB = tempB.next;
            if(tempA == null || tempB == null){
                return null;
            }
        }
        
        return tempA;
        
    }
}