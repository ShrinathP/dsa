class Solution {
//https://leetcode.com/problems/3sum/discuss/7380/Concise-O(N2)-Java-solution
Time Complexity O(N square) + O(NlogN if you are sorting the array at first)

/*
1. First Sort the array, for 2 pointer to work (Important)
2. For nums i, required sum = 0 - nums[i] 
3. Run 2 pointers for i+1 to nums.length -1

***"IMP Note: how duplicates are removed"
** how low and hi are moved when condition passed

*/
public List<List<Integer>> threeSum(int[] num) {

    Arrays.sort(num);
    List<List<Integer>> res = new LinkedList<>(); 
    for (int i = 0; i < num.length-2; i++) {

//you can skip duplicates using while at end also, -check 4 sum solution
//skipping duplicates, for 1st number of the triplet
        if (i == 0 || (i > 0 && num[i] != num[i-1])) {
            int lo = i+1, hi = num.length-1, sum = 0 - num[i];
            while (lo < hi) {
                if (num[lo] + num[hi] == sum) {
                    res.add(Arrays.asList(num[i], num[lo], num[hi]));

//moving to the last of duplicates,
//for 2nd and 3rd number of the triplet
//checking forward number for duplicates
                    while (lo < hi && num[lo] == num[lo+1]) lo++;
                    while (lo < hi && num[hi] == num[hi-1]) hi--;
                    lo++; hi--;
//Basic moving of pointers
                } else if (num[lo] + num[hi] < sum) lo++;
                else hi--;
           }
        }
//other way to remove dups
// while(i+1 < n && nums[i] == nums[i+1]) i++;
    }
    return res;
}
}