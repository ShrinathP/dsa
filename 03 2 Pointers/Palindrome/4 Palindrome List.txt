/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        //Palindrome LL - 2 pointer
        //Nick White | Take u forward
        //Step 1: Find the middle of the LL
        //Step 2: Reverse the LL from middle to right part
        //Step 3: iterate over 2 halfs
        
        ListNode slow = head;
        ListNode fast = head;
        
        while(fast!=null && fast.next!=null){
            fast = fast.next.next;
            slow = slow.next;
        }
        
        //Step 2
        //now slow is at halfway
        //we need to reverse all the nodes ahead of slow
        slow = reversed(slow);
        //moving fast to head
        fast = head;
        
        //Step 3
        while(slow != null){    
            if(slow.val != fast.val){
                return false;
            }
            slow = slow.next;
            fast = fast.next;
        }
        
        return true;
    }
    
    //reverse LL see Nick white soln
    public ListNode reversed(ListNode head){
        ListNode prev = null;
        while(head !=null){
            ListNode next = head.next; //save current next
            head.next = prev; //assign current next to prev (null)
            prev = head;  //move prev to head
            head = next; //move head to saved next
        }
        return prev;
        
    }
}