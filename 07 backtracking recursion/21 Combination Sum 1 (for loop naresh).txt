/*
Check this one too
https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)

Naresh Gupta
For loop + 1 pick backtrack

NOTE
If you use for loop you dont have to put a non pick recursion
condition, 

as the for loop starting from
further indices will automatically not pick 
previous indices elements
*/

    //You can repeat the number multiple times
    //Backtracking
    //Naresh Gupta - backtracking with for loop

class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(candidates, 0, target, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int[] cand, int start, int target, List<Integer> list, List<List<Integer>> result) {
        if (target < 0) return;
        if (target == 0) {
            result.add(new ArrayList<>(list));
            return;
        }

        for (int i = start; i < cand.length; i++) {
            list.add(cand[i]);
            backtrack(cand, i, target - cand[i], list, result);
            list.remove(list.size() - 1); // backtrack
        }
    }
}
