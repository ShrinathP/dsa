//DFS way
//https://leetcode.com/problems/permutations/discuss/543871/Java
//Keep a check if the number is already in the path or not

//NOTE
//NO INDEX , just permute everything
//NOTE: Every permutation recursion starts at i = 0

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();
        dfs(results, new ArrayList<>(), nums);
        return results;
    }
    
    void dfs(List<List<Integer>> results, List<Integer> path, int[] nums) {
        if(path.size() == nums.length) {
            results.add(new ArrayList<>(path));
            return;
        }
        else {
            for(int i = 0; i < nums.length; i++) {
                if(path.contains(nums[i]))
                    continue;
                path.add(nums[i]);
                dfs(results, path, nums);
                path.remove(path.size() - 1); //#backtracking
            }
        }
    }
}