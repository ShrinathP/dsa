To get right side view
we do a BFS
and at every levels
we put the last added node into the result list

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
/*
Kevin Naughton

As top to bottom is said its a BFS solution
Add level order elements 
Pop the last element and add to the result
*/
class Solution {
    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> visibleValues = new ArrayList<>();
        
        if(root == null) {
            return visibleValues;
        }
        
        //as this is a queue the last added element would be last removed
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        
        //BFS
        while(!queue.isEmpty()){
            
            //remove elements from queue
            //if the element is the last element add to the result
            int size = queue.size();
            for(int i = 0; i<size; i++){
                TreeNode current = queue.remove();
                if(i == size - 1){
                    visibleValues.add(current.val);
                }
                
                //Add next level children
                if(current.left != null){
                    queue.add(current.left);
                }
                
                if(current.right != null){
                    queue.add(current.right);
                }
            }
        }
        
        return visibleValues;
    }
}