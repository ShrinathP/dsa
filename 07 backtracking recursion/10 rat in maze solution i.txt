import java.util.*;

/*
1. Keep track of the visited array to make sure, that
path is visited only once
2. Check if 0,0 number is 1
3. if not 1 then we cant traverse return false
4. Create a backtrack function taking , rownumber, colnumber, emptystring, visitedarray, result
5. Backtrack function
	5.1	base case, if row and column reached end, then add the string to the result and return
	5.2     add down movement, check if visited, check if i + 1 < n, check if there is no block meaning board[i+1][j] == 1
	similarly add all movements

*/

//Take u forward
public class HelloWorld{

     public static void main(String []args){
     int N = 4;
     int m[][] = {{1, 0, 0, 0},
                 {1, 1, 0, 1}, 
                 {1, 1, 0, 0},
                 {0, 1, 1, 1}};
                 
        ArrayList<String> op = findPath(m, N);
        op.stream().forEach(System.out::println);
    
     }
//OUTPUT 
//DDRDRR
//DRDDRR
     
     public static ArrayList<String> findPath(int[][] m, int n) {
         //Creating a visited array, 
         //prefilled with 0's
         
         int vis[][] = new int[n][n];
         for(int i=0; i<n;i++){
             for(int j=0;j<n;j++){
                 vis[i][j] = 0;
             }
         }
         
         //arrayList of all possible valid Strings
         ArrayList<String> ans = new ArrayList<>();
         if(m[0][0] == 1){
             solve(0, 0, m, n, ans, "", vis);
         }
         
         return ans;
	}
	
	private static void solve(int i, int j, int[][] arr, int n,
	ArrayList<String> ans, String move, int[][] vis){
	    
	    //if we have reached end, add to the ArrayList
	    //and return from the recursive loop
	    if(i==n-1 && j==n-1){
	        ans.add(move);
	        return;
	    }
	    
	    /*if not visited and array value is 1, then only move*/
	    //downward movement
	   if(i+1<n && vis[i+1][j] == 0 && arr[i+1][j] == 1){
	       vis[i][j] = 1; //put visited
	       solve(i+1, j, arr, n, ans, move + 'D', vis);
	       //backtrack
	       vis[i][j] = 0;
	   }
	   
	   //left movement
	   if(j-1>=0 && vis[i][j-1] == 0 && arr[i][j-1] == 1){
	       vis[i][j] = 1; //put visited
	       solve(i, j-1, arr, n, ans, move + 'L', vis);
	       //backtrack
	       vis[i][j] = 0;
	   }
	   
	   //right movement
	   if(j+1<n && vis[i][j+1] == 0 && arr[i][j+1] == 1){
	       vis[i][j] = 1; //put visited
	       solve(i, j+1, arr, n, ans, move + 'R', vis);
	       //backtrack
	       vis[i][j] = 0;
	   }
	   
	   //up movement
	   if(i-1>n && vis[i-1][j] == 0 && arr[i-1][j] == 1){
	       vis[i][j] = 1; //put visited
	       solve(i-1, j, arr, n, ans, move + 'U', vis);
	       //backtrack
	       vis[i][j] = 0;
	   }
	}
     
     
}