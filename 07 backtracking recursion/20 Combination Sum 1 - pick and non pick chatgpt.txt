/*
Find all the combinations of the numbers in candidates array that sum to a specific target number

Note
Each number in the candidates can be used any number of times

Pending Time complexity - 2 ^ n
*/

import java.util.*;

public class CombinationSum {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        backtrack(0, candidates, target, new ArrayList<>(), result);
        return result;
    }

    private void backtrack(int index, int[] candidates, int target, List<Integer> current, List<List<Integer>> result) {
        if (target == 0) {
            result.add(new ArrayList<>(current));
            return;
        }

        //if target is less than 0 we already added enough numbers, remove it
        //if we reach the length and target did not reach 0, remove it
        if (target < 0 || index == candidates.length) return;

        // Include current candidate
        current.add(candidates[index]);
        backtrack(index, candidates, target - candidates[index], current, result); // not index+1 because we can reuse
        current.remove(current.size() - 1);

        // Exclude current candidate
        backtrack(index + 1, candidates, target, current, result);
    }
}
