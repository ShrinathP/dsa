import java.util.Arrays;

// âœ… Clean & Readable Java Code:

class Solution {

    // Recursive Merge Sort function
    public void mergeSort(int[] arr, int left, int right) {
        if (left >= right) {
            return; // Base case: single element is already sorted
        }

        int mid = left + (right - left) / 2;

        // Recursively sort left half
        mergeSort(arr, left, mid);

        // Recursively sort right half
        mergeSort(arr, mid + 1, right);

        // Merge both sorted halves
        merge(arr, left, mid, right);
    }

    // Merge two sorted subarrays into one
    private void merge(int[] arr, int left, int mid, int right) {
        int[] temp = new int[right - left + 1]; // temporary array to hold merged result
        int i = left;     // pointer for left subarray
        int j = mid + 1;  // pointer for right subarray
        int k = 0;        // pointer for temp array

        // Compare elements from both halves and merge into temp
        while (i <= mid && j <= right) {
            if (arr[i] <= arr[j]) {
                temp[k] = arr[i];
                i++;
            } else {
                temp[k] = arr[j];
                j++;
            }
            k++;
        }

        // Copy any remaining elements from left half
        while (i <= mid) {
            temp[k] = arr[i];
            i++;
            k++;
        }

        // Copy any remaining elements from right half
        while (j <= right) {
            temp[k] = arr[j];
            j++;
            k++;
        }

        // Copy sorted temp array back to original array
        for (int p = 0; p < temp.length; p++) {
            arr[left + p] = temp[p];
        }
    }

    // Driver code to test
    public static void main(String[] args) {
        int[] arr = {5, 2, 8, 3, 1};
        Solution sol = new Solution();
        sol.mergeSort(arr, 0, arr.length - 1);
        System.out.println(Arrays.toString(arr)); // Output: [1, 2, 3, 5, 8]
    }
}

