/*
✅ Problem:
Given a 2D grid (0 = wall, 1 = path), find the shortest path from (0,0) to (n-1,m-1) using 4 directions.

✅ Key Idea (DFS with backtracking + minDistance tracking):
- Explore all paths from (0,0) to (n-1,m-1)
- Keep track of minimum distance
- Mark visited cells to avoid cycles
- Unmark (backtrack) after DFS
*/


class Solution {
    private int minDist = Integer.MAX_VALUE;

    public int shortestPath(int[][] maze) {
        int n = maze.length, m = maze[0].length;

        // Edge case: start or end is blocked
        if (maze[0][0] == 0 || maze[n - 1][m - 1] == 0) return -1;

        boolean[][] visited = new boolean[n][m];
        dfs(0, 0, maze, visited, 0);
        return minDist == Integer.MAX_VALUE ? -1 : minDist;
    }

    private void dfs(int row, int col, int[][] maze, boolean[][] visited, int dist) {
        int n = maze.length, m = maze[0].length;

        // Reached destination
        if (row == n - 1 && col == m - 1) {
            minDist = Math.min(minDist, dist + 1);
            return;
        }

        visited[row][col] = true;

        // Move Down
        if (isSafe(row + 1, col, maze, visited)) {
            dfs(row + 1, col, maze, visited, dist + 1);
        }

        // Move Up
        if (isSafe(row - 1, col, maze, visited)) {
            dfs(row - 1, col, maze, visited, dist + 1);
        }

        // Move Right
        if (isSafe(row, col + 1, maze, visited)) {
            dfs(row, col + 1, maze, visited, dist + 1);
        }

        // Move Left
        if (isSafe(row, col - 1, maze, visited)) {
            dfs(row, col - 1, maze, visited, dist + 1);
        }

        // Backtrack
        visited[row][col] = false;
    }

    // Safety check: within bounds, on path, and not visited
    private boolean isSafe(int row, int col, int[][] maze, boolean[][] visited) {
        int n = maze.length, m = maze[0].length;
        return row >= 0 && col >= 0 && row < n && col < m &&
               maze[row][col] == 1 && !visited[row][col];
    }
}
