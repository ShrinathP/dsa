/*
✅ Problem:
Given a 2D grid (0 = wall, 1 = path), find the shortest path from (0,0) to (n-1,m-1) using 4 directions.

maintain distance change in array - dx dy

✅ Key Idea (DFS with backtracking + minDistance tracking):
- Explore all paths from (0,0) to (n-1,m-1)
- Keep track of minimum distance
- Mark visited cells to avoid cycles
- Unmark (backtrack) after DFS
*/

class Solution {
    private int minDist = Integer.MAX_VALUE;
    private int[] dx = {-1, 1, 0, 0};
    private int[] dy = {0, 0, -1, 1};

/*
distance movement
-1,0 : left
1,0  : right
0,-1 : down
0,1  : up
*/

    public int shortestPath(int[][] maze) {
        int n = maze.length, m = maze[0].length;
        //edge cases - if the left top is not 1, we cannot start
        // - if the right bottom is not 1, we cannot end
        if (maze[0][0] == 0 || maze[n - 1][m - 1] == 0) return -1;

        boolean[][] visited = new boolean[n][m];
        dfs(0, 0, maze, visited, 0);
        return minDist == Integer.MAX_VALUE ? -1 : minDist;
    }

    private void dfs(int x, int y, int[][] maze, boolean[][] visited, int dist) {
        int n = maze.length, m = maze[0].length;

        if (x == n - 1 && y == m - 1) {
            minDist = Math.min(minDist, dist + 1);
            return;
        }

        visited[x][y] = true;

        for (int d = 0; d < 4; d++) {
            int nx = x + dx[d], ny = y + dy[d];

            if (nx >= 0 && ny >= 0 && nx < n && ny < m &&
                maze[nx][ny] == 1 && !visited[nx][ny]) {
                dfs(nx, ny, maze, visited, dist + 1);
            }
        }

        visited[x][y] = false; // backtrack
    }
}
