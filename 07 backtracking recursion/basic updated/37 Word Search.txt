/*
✅ Problem:
Given a 2D board and a word, return true if the word exists in the grid.
You can move horizontally or vertically to adjacent cells, and each cell can be used once per path.

Recursive DFS
nick white

✅ Algorithm Steps:

1. Loop over each cell in the grid:
  - If board[i][j] == word.charAt(0) → start DFS. - start when you find the first letter
2. In DFS:
  - Base case: If index == word.length() → entire word matched → return true.
  - If out of bounds OR already visited OR mismatch → return false.
  - Mark board[i][j] = '#' (or use a visited array).
  - Recurse in 4 directions:
    - Down → i+1, j
    - Up → i-1, j
    - Right → i, j+1
    - Left → i, j-1
  - If any recursive call returns true, propagate true.
  - Backtrack by restoring original character. (or hold a visited array)
3. If no DFS path matches the full word, return false.

*/
//nick white
//DFS  + recursion

class Solution {
    boolean visited[][];
    public boolean exist(char[][] board, String word) {
        int rows = board.length;
        int columns = board[0].length;
        
        visited = new boolean[rows][columns];
        
        for(int i=0; i< rows; i++){
            for(int j=0; j< columns; j++){
                if(word.charAt(0) == board[i][j]
                  && searchWord(i, j, 0, word, board)){
                    return true;
                }
            }
        }
        return false;
    }
    
    public boolean searchWord(int i, int j, int index, String word, char[][] board) {
        
        //we reached end
        if(index == word.length()){
            return true;
        }
        
        //edge cases , invalid cases
        //check if already visited
        if(i<0 || i>= board.length || j< 0 || j>= board[i].length || word.charAt(index) != board[i][j] || visited[i][j]) {
            return false;
        }
        visited[i][j] = true;
        
        if(searchWord(i+1, j, index+1, word, board) ||
          searchWord(i-1, j, index+1, word, board) ||
          searchWord(i, j+1, index+1, word, board) ||
          searchWord(i, j-1, index+1, word, board)
          ){
            return true;
        }
        
        //reset current value to false
        visited[i][j] = false;
        return false;

    }
}
