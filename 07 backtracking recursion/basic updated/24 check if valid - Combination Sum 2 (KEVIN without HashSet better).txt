//Kevin Naughton Solution
// another way to skip duplicates at the same level in for loop is 
// if( i==ind || arr[i] != arr[i-1]){ // ✅ skip duplicates at same level
// if first index go ahead, for other indexes skip duplicates
// Kevin Naughton - combination sum 2 solution - skip duplicates

class Solution {
    //Constraint1: Unique combinations
    //Constraint2: Each Number in the list can be used only once
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> result = new ArrayList<>();
        Arrays.sort(candidates);
        findCombinations(0, candidates, target, result, new ArrayList<>());
        return result;
    }
    
    private void findCombinations(int ind, int[] arr, int target,
                                 List<List<Integer>> ans, List<Integer> ds) {
        //we successfully reached 0
        if(target == 0) {
            ans.add(new ArrayList<>(ds));
            return;
        }
        
        if(target < 0) {
            return;
        }
        
        for(int i=ind; i<arr.length; i++){
            if(i==ind || arr[i]!=arr[i-1]){ // ✅ skip duplicates at same level
            ds.add(arr[i]);
            findCombinations(i+1, arr, target-arr[i], ans, ds);
            ds.remove(ds.size() - 1);
            }
        }
        
    }
}