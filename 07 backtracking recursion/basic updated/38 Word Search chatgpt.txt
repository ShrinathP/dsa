/*
✅ Problem:
Given a 2D board and a word, return true if the word exists in the grid.
You can move horizontally or vertically to adjacent cells, and each cell can be used once per path.

Recursive DFS

✅ Algorithm Steps:
1. Loop over each cell in the grid:
  - If board[i][j] == word.charAt(0) → start DFS.
2. In DFS:
  - Base case: If index == word.length() → entire word matched → return true.
  - If out of bounds OR already visited OR mismatch → return false.
  - Mark board[i][j] = '#' (visited).
  - Recurse in 4 directions:
    - Down → i+1, j
    - Up → i-1, j
    - Right → i, j+1
    - Left → i, j-1
  - If any recursive call returns true, propagate true.
  - Backtrack by restoring original character. (or hold a visited array)
3. If no DFS path matches the full word, return false.

*/
//chatgpt
//DFS  + recursion

class Solution {
    public boolean exist(char[][] board, String word) {
        int m = board.length, n = board[0].length;

        for (int row = 0; row < m; row++) {
            for (int col = 0; col < n; col++) {
                if (board[row][col] == word.charAt(0)) {
                    if (dfs(board, row, col, word, 0))
                        return true;
                }
            }
        }
        return false;
    }

    private boolean dfs(char[][] board, int row, int col, String word, int index) {
        // base case: all characters matched
        if (index == word.length()) return true;

        // bounds and character mismatch
        if (row < 0 || row >= board.length || col < 0 || col >= board[0].length ||
            board[row][col] != word.charAt(index))
            return false;

        char temp = board[row][col];
        board[row][col] = '#'; // mark visited

        // explore in 4 directions
        boolean found = dfs(board, row + 1, col, word, index + 1) ||
                        dfs(board, row - 1, col, word, index + 1) ||
                        dfs(board, row, col + 1, word, index + 1) ||
                        dfs(board, row, col - 1, word, index + 1);

        board[row][col] = temp; // backtrack
        return found;
    }
}
