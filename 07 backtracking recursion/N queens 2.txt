
//Very good explanation GFG and code
//https://www.geeksforgeeks.org/printing-solutions-n-queen-problem/


//https://leetcode.com/problems/n-queens-ii/discuss/20048/Easiest-Java-Solution-(1ms-98.22)
/*
This is a classic backtracking problem.

Start row by row, and loop through columns. At each decision point, skip unsafe positions by using three boolean arrays.

Start going back when we reach row n.

Just FYI, if using HashSet, running time will be at least 3 times slower!
See Hash set solution
https://leetcode.com/problems/n-queens-ii/discuss/20058/Accepted-Java-Solution
*/
class Solution {
    int count = 0;
    public int totalNQueens(int n) {
        //maintaining 3 boolean arrays for verification if the place is safe to
        //put a queen
        boolean[] cols = new boolean[n]; //column | 
        boolean[] d1 = new boolean[2*n]; //diagonal \
        boolean[] d2 = new boolean[2*n]; //diagonal /
        backtracking(0, cols, d1, d2, n);
        return count;
    }
    
    private void backtracking(int row, boolean[] cols, boolean[] d1, boolean[] d2, int n) {
        if(row == n) count++;
        
        for(int col =0; col < n; col++){
            //IMP find out how diagonals is calculated
            int id1 = col - row + n; // right slant diagonal \
            int id2 = col + row; // left slant diagonal /
            if(cols[col] || d1[id1] || d2[id2]){
                continue;
                /*  if any of the current column is filled
                    OR
                    any of the d1 diagonal or d2 is filled 
                */
                }
            
                //consider current place as filled with queen
                System.out.println(" row " + row + " col " + col + " \\ diagonal: " + id1 + " / diagonal: "+ id2);
                cols[col] = true; d1[id1] = true; d2[id2] = true;
                //backtrack other rows
                backtracking(row + 1, cols, d1, d2, n);
                //set back to false
                cols[col] = false; d1[id1] = false; d2[id2] = false;


            
        }
    }
}