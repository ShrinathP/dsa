package e2e.cbr.validation;

import java.util.HashSet;

public class Test124 {

    public static void main(String[] args) {
        System.out.println(minWindowSelf("dabbcacbdc"));;
    }

    public static String minWindowSelf(String str) {

        // If you try to add a duplicate element in HashSet, the old value would be overwritten.
        HashSet<Character> hs = new HashSet<>();
        for(int i=0; i< str.length(); i++) {
            hs.add(str.charAt(i));
        }

        //unique value counter
        int counter = hs.size();

        int start = 0;
        int end = 0;
        int head = 0;
        int len = Integer.MAX_VALUE;
        while(end < str.length()) {

            //checking if hs contains the character, because hs will add only one time
            if(hs.contains(str.charAt(end))) {
                hs.remove(str.charAt(end));
                counter--;
            }
            end++;

            //removed all uniq chars
            while(counter == 0) {
                char frontChar = str.charAt(start);

                //Logic
                //increase the counter of frontChar
                //as we will be moving begin ahead

                //chop off the front, and check if rest string contains front characters
                //can use while loop also
                    if(str.substring(start+1, end+1).contains(String.valueOf(frontChar))) {

                        //if ahead substring, contains char to be removed
                        //do not increase counter,
                        //there can be other repeating chars
                    } else {
                        hs.add(frontChar);
                        counter++;
                    }

                //}


                if(end - start < len) {
                    len = end - start;
                    head = start;
                }
                start++;
            }
        }
        return str.substring(head, head + len);
    }
}
