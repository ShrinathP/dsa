//check striver solution
//check culprit method codewithMIK

424. Longest Repeating Character Replacement
// We are removing the while loop to trim the left pointer continuously 
//We only trim by 1, so effectively keeping the max length same if not satisfied
//if r-l+1 was the largest substring in one of the previous iterations
//we move both l and r by 1 keeping length same
//eliminating need of while loop

//using maxLen to save max length

/*
//https://github.com/doocs/leetcode/blob/main/solution/0400-0499/0424.Longest%20Repeating%20Character%20Replacement/README_EN.md
Make sure that
the size of the window minus the count of the most frequent character does not exceed k
1. hold count of the most frequent character
2. if more replacment than k needed, shave of one from the left
3. calculate maxLen
*/

class Solution {
    public int characterReplacement(String s, int k) {
        int[] cnt = new int[26];  // Frequency of characters in the window
        int l = 0, maxFreq = 0, maxLen = 0;

        for (int r = 0; r < s.length(); ++r) {
            int idx = s.charAt(r) - 'A';
            cnt[idx]++;
            //1. hold count of the most frequent character
            maxFreq = Math.max(maxFreq, cnt[idx]);

            // If replacements needed exceed k, shrink window from left
            if ((r - l + 1) - maxFreq > k) {
                cnt[s.charAt(l++) - 'A']--;
            }

            // Always update maxLen from the current valid window
            // can add if ((r - l + 1) - maxFreq <= k) condition for verbosity
            maxLen = Math.max(maxLen, r - l + 1);
        }

        return maxLen;
    }
}

