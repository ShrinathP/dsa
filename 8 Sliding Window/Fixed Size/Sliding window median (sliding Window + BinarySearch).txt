//This is best
https://leetcode.com/problems/sliding-window-median/discuss/1033580/Java-Intuitive-Binary-Search-%2B-Sliding-Window-Solution-beats-100



https://leetcode.com/problems/sliding-window-median/discuss/624147/Java-solution-sliding-window%2BbinarySearch-with-explanation

//O(N)
https://leetcode.com/problems/sliding-window-median/discuss/594632/Java-solution-sliding-window-%2B-binary-search


https://www.youtube.com/watch?v=wWLVZQVAHaI


//Solution
/*

https://leetcode.com/problems/sliding-window-median/discuss/594632/Java-solution-sliding-window-%2B-binary-search

1. Create a list, which will hold numbers of size k,
and will be used to calculate median
2. Create a double array which will hold all medians,
size of this will be nums.length -k + 1
3. Sliding window
- if i==0, start filling the first k
- else
- remove start of sliding window and end of window
keep calculating median in any case
*/


class Solution {
    public double[] medianSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        double[] arr = new double[n - k + 1];
        List<Integer> list = new ArrayList<>();
        for (int i = 0; i <= n - k; i++) {
            if (i == 0) {
                for (int j = 0; j < k; j++) {
                    list.add(nums[j]);
                }
                Collections.sort(list);
            }
            else {
                int rmv = Collections.binarySearch(list, nums[i - 1]);
                list.remove(rmv);
                int ins = Collections.binarySearch(list, nums[i + k - 1]);
                if (ins < 0) {
                    ins = -1 * (ins + 1);
                }
                list.add(ins, nums[i + k - 1]);
            }
            
            double median = 0.0;
            if (k % 2 == 0) {
                median = ((double) list.get(k/2))/2 + ((double) list.get(k/2 - 1))/2;
            } else {
                median = (double) list.get(k/2);
            }
            arr[i] = median;
        }
        
        return arr;
    }
}