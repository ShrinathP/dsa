
//GFG deque
//Time complexity O(n) and O(k) space complexity as we are holding in Deque

//Explanation
//Yogesh & Shailesh (CodeLibrary)
//GFG Website


class Main {
    public static int[] firstNegInt(int[] arr, int k) {
        Deque<Integer> dq = new LinkedList<>();
        List<Integer> res = new ArrayList<>();
        
        //Process first k window elements, add their indexes
        for(int i=0; i< k; i++) {
            if(arr[i]<0){
                dq.addLast(i);
            }
        }
        
        //Process the rest of the elements i.e.
        //from k to n-1
        for(int i=k;i<n;i++) {
            //adding to the result list
            if(!dq.isEmpty()) {
                res.add(dq.peekFirst());
            } else {
                res.add(0);
            }
            
            //start removing index out of bound elements
            while(!dq.isEmpty() && dq.peekFirst() < i-k + 1) {
                dq.pollFirst();
            }
            
            //Keep adding current element index at the rear 
            //if it is negative
            if(arr[i] < 0) {
                dq.addLast(i);
            }
        }
        
        //Print the first negative integer of the last window
        if(!dq.isEmpty()){
            res.add(arr[dq.peekFirst()]);
        } else {
            res.add(0);
        }
        
        return res.stream().mapToInt(i-> i).toArray();
    }
    
    public static void main(String[] args) {
        int[] arr = {12,-1,-7,8,-15,30,16,28};
        int k=3;
        int[] res = firstNegInt(arr, k);
        System.out.println(Arrays.toString(res));
    }
}
    
 
