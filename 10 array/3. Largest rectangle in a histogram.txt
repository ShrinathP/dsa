/*
Jayati tiwari utube
https://leetcode.com/problems/largest-rectangle-in-histogram/discuss/28902/5ms-O(n)-Java-solution-explained-(beats-96)

1. Maintain 2 arrays
2. lessFromLeft array holds the left index where the height becomes less from current height
3. lessfromRight array holds the right index where the height becomes less from curr. height


4. Now run again a for loop and calculate the Max Area

5. USING LESSFROMLEFT ARRAY TO FIND PREV LESS
The only line change shifts this algorithm from O(n^2) to O(n) complexity: we don't need to rescan each item to the left - we can reuse results of previous calculations and "jump" through indices in quick manner:
while (p >= 0 && height[p] >= height[i]) {
      p = lessFromLeft[p];
      
}
USING LESSFROMLEFT ARRAY TO FIND PREV LESS
KEEP JUMPING LEFT UNTIL THE HEIGHT CONDITION SATISFIES
*/
class Solution {
    public static int largestRectangleArea(int[] height) {
    if (height == null || height.length == 0) {
        return 0;
    }
    int[] lessFromLeft = new int[height.length]; // idx of the first bar the left that is lower than current
    int[] lessFromRight = new int[height.length]; // idx of the first bar the right that is lower than current
    lessFromRight[height.length - 1] = height.length;
    lessFromLeft[0] = -1;

    for (int i = 1; i < height.length; i++) {
        int p = i - 1;

        while (p >= 0 && height[p] >= height[i]) {
            p = lessFromLeft[p];
        }
        lessFromLeft[i] = p;
    }

    for (int i = height.length - 2; i >= 0; i--) {
        int p = i + 1;

        while (p < height.length && height[p] >= height[i]) {
            p = lessFromRight[p];
        }
        lessFromRight[i] = p;
    }

    int maxArea = 0;
    for (int i = 0; i < height.length; i++) {
        maxArea = Math.max(maxArea, height[i] * (lessFromRight[i] - lessFromLeft[i] - 1));
    }

    return maxArea;
}
}