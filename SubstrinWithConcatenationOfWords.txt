class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        if(s == null || s.length()==0 || words == null || words.length == 0 ){
            return new ArrayList<>();
        }
        
        //Step 1
        //Make a frequencyMap to count the frequency of word in words array
        Map<String, Integer> frequencyMap = new HashMap<>();
        for(String word: words){
            frequencyMap.put(word, frequencyMap.getOrDefault(word, 0)+1);
        }
        
        /* Understandable way
        for(String word: words){
            if(!frequencyMap.containsKey(word){
                frequencyMap.put(word, 1);
            }else{
                frequencyMap.put(word, frequencyMap.get(word) + 1);
            }     
        }
        */
        
        //As all words will have same length
        int eachWordLength = words[0].length();
        int totalWords = words.length;
        List<Integer> result = new ArrayList<>();

        
        //ITERATING OVER GIVEN STRING
        //Stop your word search when i reaches strlength minus totalwords length
        for(int i=0; i<= s.length() - totalWords*eachWordLength; i++){
            
            //map to track seenWords and its frequency
            Map<String, Integer> seenWords = new HashMap<>();
            
            //ITERATING OVER EACH WORDS
            for(int j=0; j< totalWords; j++){
                int wordIndex = i + j * eachWordLength;
                //(i and j will be 0 for 1st iteration)
                
                //cropping by eachWordLength
                String currentWord = s.substring(wordIndex, wordIndex + eachWordLength);
                
                //if word not in frequencyMap
                if(!frequencyMap.containsKey(currentWord)){
                    break;
                    //breaking the current 'ITERATING OVER EACH WORDS'
                }
                
                //if word in freqMap increase its frequency
                seenWords.put(currentWord, seenWords.getOrDefault(currentWord, 0) + 1);
                
                //if currentWord frequency is greater in seenWords
                if(seenWords.get(currentWord) > frequencyMap.get(currentWord)){
                    break;
                }
                
                //if we find all the words we add the startIndex and  
                if(j+1 == totalWords){
                    result.add(i);
                }
            }
        }
            		return result;
    }
}