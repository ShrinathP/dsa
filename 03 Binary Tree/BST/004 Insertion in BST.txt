/*
Striver explanation - 
There can be multiple possibilities of insertion 

/*
Original BST before inserting 5:
        4
       / \
      2   7
     / \   
    1   3   

After inserting node 5: (at root)
        5
       / \
      4   7
     /
    2
   / \
  1   3

After inserting node 5 between 4 and 7:
        4
       / \
      2   5
     / \   \
    1   3   7

After inserting node 5 on left of 7:
         4
       /   \
      2     7
     / \   /
    1   3  5

Explanation:
Can  be multiple way in which we can insert 5

Logic
Find where the node could have been- 
There will always be some leaf position
IMP - If not null keep moving on left or right based on key value

ðŸ§  Logic:
1. Traverse the BST:
    If key < node â†’ go left.
    If key > node â†’ go right.
2. Insert at the first null child.

âœ… Time Complexity (TC)
For inserting a node into a BST, time depends on the height h:
In a balanced BST, h = logâ‚‚(n).
So TC = O(log n) in balanced case.
In worst-case (skewed tree), h = n, so TC = O(n).

SC = O(1)
*/

public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if (root == null) return new TreeNode(val);

        TreeNode curr = root;
        while (true) {
            if (val < curr.val) {
                if (curr.left == null) {
                    curr.left = new TreeNode(val);
                    break;
                }
                curr = curr.left;
            } else {
                if (curr.right == null) {
                    curr.right = new TreeNode(val);
                    break;
                }
                curr = curr.right;
            }
        }
        return root;
    }
}



