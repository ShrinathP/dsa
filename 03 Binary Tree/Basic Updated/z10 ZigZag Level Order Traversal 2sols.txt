
//2 Solutions
//Solution using Stack and a List
//1st solution
//https://buttercola.blogspot.com/2014/08/leetcode-binary-tree-zigzag-level-order.html
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList();
        if(root == null){
            return result;
        }
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        int level = 0;
        queue.offer(root);
        
        while(!queue.isEmpty()) {
            int size = queue.size();
            level++;
            ArrayList<Integer> levelList = new ArrayList<>();
            Stack<Integer> levelStack = new Stack<>();
            
            //Fill the level list or stack based on index
            for(int i=0; i< size; i++) {
                TreeNode curr = queue.poll();
                //if current level is odd, directly add to the list
                if(level % 2 == 1){
                    levelList.add(curr.val);
                } else {
                    levelStack.push(curr.val);
                }
                
                if(curr.left != null){
                    queue.offer(curr.left);
                }
                
                if(curr.right != null){
                    queue.offer(curr.right);
                }
            }
            
            //For even levels, dump the elements of the stack
            //to the arrayList, (stack dumps in reverse order)
            if(level % 2 == 0){
                while(!levelStack.isEmpty()){
                    levelList.add(levelStack.pop());
                }
            }
            
            //Then add the levelList to the result list
            result.add(levelList);
            
        }
        return result;
    }
}

//2nd
//Solution without using Stack
//Using a flag
//Without using Stack
//Take U Forward

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        List<List<Integer>> wrapList = new LinkedList<List<Integer>>();
        
        if(root == null) return wrapList;
        
        queue.offer(root);
        boolean flag = true; 
        while(!queue.isEmpty()){
            
            int levelNum = queue.size();
            List<Integer> subList = new ArrayList<Integer>(levelNum);
            for(int i=0; i<levelNum; i++) {
                //int index = i;
                
                //Check the left and right of the first peek element
                //if present keep adding to the queue
                if(queue.peek().left != null) queue.offer(queue.peek().left);
                if(queue.peek().right != null) queue.offer(queue.peek().right);
                
                //Add elements to the sublist
                //Add the element at the back if flag is true
                //if false keep adding the element at the front of the sublist
                if(flag == true) subList.add(queue.poll().val);
                else subList.add(0, queue.poll().val);
            }
            flag = !flag; 
            wrapList.add(subList);
        }
        return wrapList;
    }
}