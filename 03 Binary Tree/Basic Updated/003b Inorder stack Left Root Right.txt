//Take u fwd explanation
//chatgpt solution

1) Create an empty stack nodeStack and push root node to stack. 
2) Push left children of a item to stack until you get null
3) Pop an item from the stack and print it. 
4) Check the right of the popped element

//1. keep going left, keep pushing left nodes
//2. pop, add and assign right

Algorithm:
Initialize:
Stack st = empty.
Pointer curr = root.
While curr != null or stack not empty:
Go Left:
While curr != null:
Push curr to stack.
Move curr = curr.left.
Process Node:
Pop node from stack â†’ curr.
Process curr.val.
Move curr = curr.right.
Repeat. */


import java.util.*;

class TreeNode {
    int val;
    TreeNode left, right;
    TreeNode(int val) {
        this.val = val;
    }
}

public class InorderTraversal {

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;

        while (curr != null || !stack.isEmpty()) {
            //1. keep going left, keep pushing left nodes
            //can use if else as well
            while (curr != null) {
                stack.push(curr);
                curr = curr.left;
            }

            //2. pop, add and assign right
            //going back up 
            curr = stack.pop();
            res.add(curr.val);
            curr = curr.right;
        }
        return res;
    }

    public static void main(String[] args) {
        // Example tree: 
        //      1
        //       \
        //        2
        //       /
        //      3

        TreeNode root = new TreeNode(1);
        root.right = new TreeNode(2);
        root.right.left = new TreeNode(3);

        InorderTraversal sol = new InorderTraversal();
        List<Integer> result = sol.inorderTraversal(root);
        System.out.println(result);  // Output: [1, 3, 2]
    }
}
