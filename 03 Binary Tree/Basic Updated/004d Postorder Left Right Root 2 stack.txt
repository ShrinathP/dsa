    
//Here we are using 2 stacks to solve the problm
/*
Take U forward

* Chatgpt explanation
Intuition
Core Idea (Intuition):
Postorder: Left -> Right -> Root
We convert it to:
First do modified preorder: Root -> Right -> Left
Then reverse the order to get postorder.

Why it works:
s1 builds reverse postorder by traversing Root → Right → Left.
s2 reverses that into Left → Right → Root (which is postorder).

chatgpt Algorithm
Algorithm:
* 1️⃣ First stack (s1):
* Push root to s1.
* While s1 is not empty:
    - Pop node from s1.
    - Push node to second stack s2.
    - Push left child to s1 (if exists).
    - Push right child to s1 (if exists).
* 2️⃣ Second stack (s2):
* Now s2 contains nodes in reverse postorder.
* Pop all nodes from s2 to get postorder.


# As we are pushing the root first, and then left and right,
if we pop st1 and push it in st2 we get root at bottom of the stack st2

# Also we push left and then right in st1, which pop to right and left
which again gets pushed as right and left
and gets out as left and right
*/

class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        
        List<Integer> postOrder = new ArrayList<Integer>();
        Stack<TreeNode> st1 = new Stack<TreeNode>();
        Stack<TreeNode> st2 = new Stack<TreeNode>();
        
        if(root == null){
            return postOrder;
        }
        
        st1.push(root);
        
        while(!st1.isEmpty()){
            //1
            TreeNode current = st1.pop();
            st2.push(current);
            
            //2
            if(current.left != null){
                st1.push(current.left);
            }
            if(current.right != null){
                st1.push(current.right);
            }
        }
        
        while(!st2.isEmpty()){
            postOrder.add(st2.pop().val);
        }
        
        return postOrder;
    }
}