//Recursion way to checking Balanced Binary Tree
//explanation Striver
//google ai solution

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

class BinaryTree {
    Node root;

    // Function to calculate the height of a subtree
    int height(Node node) {
        if (node == null) {
            return -1;
            //no node return -1 so that 1-1 = 0
        }
        return 1 + Math.max(height(node.left), height(node.right));
    }

    // Function to check if the tree is balanced
    boolean isBalanced(Node node) {
        if (node == null) {
            return true;
        }

        int leftHeight = height(node.left);
        int rightHeight = height(node.right);

        if (Math.abs(leftHeight - rightHeight) > 1) {
            return false;
        }

        return isBalanced(node.left) && isBalanced(node.right);
    }

    public static void main(String[] args) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        // tree.root.left.left.left = new Node(8); // Uncomment this to make it unbalanced

        if (tree.isBalanced(tree.root)) {
            System.out.println("The tree is balanced");
        } else {
            System.out.println("The tree is not balanced");
        }
    }
}
