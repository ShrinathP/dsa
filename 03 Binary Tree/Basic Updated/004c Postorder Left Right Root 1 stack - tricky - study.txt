
//Single Stack solution
//Take U forward (can leave)
// ✅ In fact: this is called the "Modified Morris-style" or "Iterative Left-Right trick".
//✅ Postorder just adds "check right subtree first before processing."



class Solution {

    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> st1 = new Stack<TreeNode>(); 
        List<Integer> postOrder = new ArrayList<Integer>();
        
        if(root == null) return postOrder; 
        
        TreeNode current = root;  
        while(current != null || !st1.isEmpty()) {
//Keep moving left left left left until null
//if will be executed until first null on left side
            if(current != null){
                st1.push(current);
                current = current.left;
            }else{
//No left, check for right not null
                TreeNode temp = st1.peek().right;

//No right - pop the last and print
//This is the last right - print it
                if (temp == null) {
                    temp = st1.pop(); //* last temp
                    postOrder.add(temp.val);

//if (right == null || right already visited)
//going back - check right already visited
//if the last temp (line 31) was current stack tops right, reassign temp, add this one to postOrder
                    while (!st1.isEmpty() && temp == st1.peek().right) {
                        temp = st1.pop();
                        postOrder.add(temp.val);
                    }
                } else {
//Right is not null, add to current which will be checked for lefts in the next iteration
                    current = temp;
                }
            }
        }
      
        return postOrder; 
    }
}