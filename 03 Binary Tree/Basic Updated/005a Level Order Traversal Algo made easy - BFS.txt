
//Alogrithms made easy //BFS
//Level Order
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList();
        
        //if no root return empty arrayList
        if(root == null){
            return result;
        }
        
        //Step 1 
        //create a queue and add root node
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        //Step 2
        //Run until the queue is not empty
        
        //Step  3
        //For each level
        //1. poll the element from queue
        //2. check the left and right elements of the removeed current element
        //3. if present add to the queue and iterate next
        while(!queue.isEmpty()) {
            int size = queue.size();
            List<Integer> currentLevel = new ArrayList<>();
            for(int i=0; i<size; i++) {
//you can use while(size-- > 0) instead of for loop
                //poll each node 
                //add to the current level
                //and check its left and right
                TreeNode current = queue.poll();
                currentLevel.add(current.val);
                if(current.left != null){
                    queue.offer(current.left);
                }
                if(current.right != null){
                    queue.offer(current.right);
                }
            }
            
            result.add(currentLevel);
        }
        
        return result;
    }
}