/*
//chatgpt dfs solution
We can serialize using any method
dfs or level order traversal
Serialize the tree to a string using Stringbuilder

Now Use the Serialized String and
 a Queue to deserialize the string

 ðŸ§  Logic Explanation:
âœ… Serialization
Perform preorder traversal.
Append "null" for empty children to capture structure.
    1
   / \
  2   3
     / \
    4   5

serialized â†’ "1,2,null,null,3,4,null,null,5,null,null,"

âœ… Deserialization
Split string into tokens.
Rebuild recursively:
null token â†’ return null
otherwise â†’ build node, then left & right children
*/


public class Codec {

    //serializing left and right
    public String serialize(TreeNode root) {
        if (root == null) return "";
        Queue<TreeNode> q = new LinkedList<>();
        StringBuilder res = new StringBuilder();
        q.add(root);

        while (!q.isEmpty()) {
            TreeNode node = q.poll();
            if (node == null) {
                res.append("n ");
                continue;
            }
            res.append(node.val + " ");
            q.add(node.left);
            q.add(node.right);
        }
        return res.toString();
    }

    public TreeNode deserialize(String data) {
        if (data.equals("")) return null;
        Queue<TreeNode> q = new LinkedList<>();
        String[] values = data.split(" ");
        TreeNode root = new TreeNode(Integer.parseInt(values[0]));
        q.add(root);

        for (int i = 1; i < values.length; i++) {
            TreeNode parent = q.poll();
            //add left
            if (!values[i].equals("n")) {
                TreeNode left = new TreeNode(Integer.parseInt(values[i]));
                parent.left = left;
                q.add(left);
            }
            //add right
            if (!values[++i].equals("n")) {
                TreeNode right = new TreeNode(Integer.parseInt(values[i]));
                parent.right = right;
                q.add(right);
            }

            //if null no need to add anything
        }
        return root;
    }
}



