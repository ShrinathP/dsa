/*
//Take u explanation
//Pre order traversal
//Root left-(go deep left if present) right
// LIFO - last in first out  - so push right then left

Class LIFO Preorder


Logic GFG
1) Create an empty stack nodeStack and push root node to stack. 
2) Do the following while nodeStack is not empty. 
….a) Pop an item from the stack and print it. 
….b) Push right child of a popped item to stack 
….c) Push left child of a popped item to stack
The right child is pushed before the left child to make sure that the left subtree is processed first.


*/

class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> preorder = new ArrayList<Integer>();
        //base case
        if(root == null) return preorder; 

        // Create empty stack and push root to it
        Stack<TreeNode> q = new Stack<TreeNode>(); 
        q.push(root);

        /* Pop all items one by one. Do following for every popped item
         a) print it
         b) push its right child
         c) push its left child
         Note that right child is pushed first so that left is processed first */

        while(!q.isEmpty()){
            root = q.pop();
            preorder.add(root.val); 
            if(root.right != null){
                q.push(root.right);
            }
            if(root.left!= null){
                q.push(root.left);
            }
        }
        return preorder; 
    }
}