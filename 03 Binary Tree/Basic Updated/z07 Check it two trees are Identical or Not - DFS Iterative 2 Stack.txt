/*
DFS Iterative with 2 Stack
chatgpt solution

1. Use 2 Stacks 
2. push the first nodes
3. and pop and compare
4. Check if any of them is null, if null check for Node equality
5. Check for value equality
5. Push right first then left, so that pop will give left first
Time complexity O(N)
*/


// Definition for a binary tree node.
public class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;
    TreeNode() {}
    TreeNode(int val) { this.val = val; }
    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }
}

class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
    Stack<TreeNode> stack1 = new Stack<>();
    Stack<TreeNode> stack2 = new Stack<>();

    stack1.push(p);
    stack2.push(q);

    while (!stack1.isEmpty() && !stack2.isEmpty()) {
        TreeNode node1 = stack1.pop();
        TreeNode node2 = stack2.pop();

        if (node1 == null || node2 == null) {
            if (node1 != node2) return false;
            continue;
        }

        if (node1.val != node2.val) return false;

        stack1.push(node1.right);
        stack1.push(node1.left);

        stack2.push(node2.right);
        stack2.push(node2.left);
    }

    return stack1.isEmpty() && stack2.isEmpty();
}


}
