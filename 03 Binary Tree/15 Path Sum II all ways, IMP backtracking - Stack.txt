//Programcreek
//BackTracking solution
//Move to all paths, keep removing the last added path

//if you pass new ArrayList<Integer>(path) in each left and right recursive call,
//then you dont have to pop
class Solution {
    private List<List<Integer>> resultList = new ArrayList();
    
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        if (root == null) return resultList;
        Stack<Integer> path = new Stack();
        pathSumInner(root, sum, path);
        return resultList;
    }
    
    public void pathSumInner(TreeNode root, int sum, Stack<Integer> path) {
        if(root == null)
            return;
        
        path.push(root.val);
        if(root.left == null && root.right == null) {
            if(sum == root.val) resultList.add(new ArrayList<Integer>(path));
        }
        
        pathSumInner(root.left, sum - root.val, path);
        pathSumInner(root.right, sum - root.val, path);
        path.pop();

//if you pass new ArrayList<Integer>(path) in each left and right recursive call,
//then you dont have to pop

    }
}