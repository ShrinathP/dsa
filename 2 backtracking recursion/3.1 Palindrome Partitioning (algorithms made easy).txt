//Algorithms made easy
//Pure backtracking
class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<>();
        dfs(0 , s, new ArrayList<String>(), result);
        return result;
    }
    
    public void dfs(int start, String s, List<String> path, List<List<String>> result){
        
        if(start == s.length()){
            result.add(new ArrayList<>(path));
            return;
        }
        
        //iterate from start to i
        //until i reaches the length
        for(int i=start; i< s.length(); i++){
            if(isPalindrome(start, i, s)){
                path.add(s.substring(start, i+1)); //as i+1 th index is not considered
                dfs(i+1, s, path, result);
                //backtrack step, remove the last element
                path.remove(path.size() -1);
            }
            
        }
    }
    
    
    public boolean isPalindrome(int start, int end, String s){
        while(start < end){
            if(s.charAt(start) != s.charAt(end)){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
}