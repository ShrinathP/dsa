
//Same as normal binary tree level order
//just that you need to store the arrays into a stack and then pop
//to make the order reverse

//https://leetcode.com/problems/binary-tree-level-order-traversal-ii/discuss/716103/Java-BFS

//Check this solution also
//where we are using addFirst method of resultant linkedList
//https://leetcode.com/problems/binary-tree-level-order-traversal-ii/discuss/35026/JAVA-SOLUTION-WITH-LINKEDLIST

class Solution {
    public List<List<Integer>> levelOrderBottom(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        
        List<List<Integer>> res = new ArrayList<>();
        //Using a stack which then will be popped and added to res
        Stack<List<Integer>> levels = new Stack<>();
        

        
        if(root == null) {
            return res;
        }
        queue.offer(root);
        
        while(!queue.isEmpty()) {
            int size = queue.size();
            
            //Creating level for each level integers
            List<Integer> level = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                TreeNode current = queue.poll();
                level.add(current.val);
                
                if(current.left != null) {queue.offer(current.left);}
                if(current.right != null) {queue.offer(current.right);}
            }
            levels.push(level);
        }
        
        while(!levels.isEmpty()) {
            res.add(levels.pop());
        }
        
        return res;
    }
}