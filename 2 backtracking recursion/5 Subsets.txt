
class Solution {
    //Iterative Recursive backtracking
//Kevin Naughton

    //Take u forward way
    //iterate over indices till n
    //add first element, keep adding (left part of DFS)
    //at last remove the last element and backtrack
    
    //Same as palindrome partitioning
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList(); 
        rec(nums,0, new ArrayList(), result);
        return result;
}
    public void rec(int[] nums,int index, List<Integer> curr, List<List<Integer>> result)
    {
        List<Integer> temp = new ArrayList<>(curr);
        int n = nums.length;

//you dont need index > n condition
        if(index > n)
        {
            return;
        }
        result.add(temp);

        for(int i = index;i<n;i++)
        {
            curr.add(nums[i]);
            rec(nums, i+1, curr, result);
            curr.remove(curr.size() - 1);
        }
    }
}