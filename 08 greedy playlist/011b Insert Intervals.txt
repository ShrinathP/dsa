/*
happygirlzt single for solution
*/


//happygirlzt

class Solution {
    //happygirlzt youtube solution
    //Step 1 iterate over intervals
    //Step 2
    //if current interval end is less than start of newInterval 
    //safely add currentInterval to res
    //Step 3
    //if newInterval end is less than start of current interval 
    //safely add newInterval
    //then add current interval
    //Step 4
    //else there is a merge - create a newInterval by finding Min and Max //add the interval
    
    public int[][] insert(int[][] intervals, int[] newInterval) {
        
        List<int[]> res = new ArrayList();
        
        for(int[] i: intervals){
            if(newInterval == null || i[1] < newInterval[0]){
                //current interval can be added safely
                res.add(i);
            } else if(newInterval[1] < i[0]){
                //new interval can be added safely
                //as new interval end is before currentinterval start
                res.add(newInterval);
                newInterval = null;
                res.add(i);
            } else {
                //need to merge
                newInterval[0] = Math.min(newInterval[0], i[0]);
                newInterval[1] = Math.max(newInterval[1], i[1]);
            }
            
        }
        if(newInterval == null) return res.toArray(new int[0][]);
        res.add(newInterval);
        return res.toArray(new int[0][]);
    }
}
