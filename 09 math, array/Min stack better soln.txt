//Stack implementation solution
//Better than Nick white
//https://leetcode.com/problems/min-stack/discuss/49010/Clean-6ms-Java-solution


class MinStack {
    private Node head;

    /** initialize your data structure here. */
    public MinStack() {
        
        
    }
    
    public void push(int x) {
        if(head == null){
            //added value and min will be the same
            head = new Node(x, x, null);
        } else {
            //keep updating the head (stack)
            //update the min value
            head = new Node(x, Math.min(x, head.min), head);
        }
    }   
    
    public void pop() {
        head = head.next;
        //assigning node ahead will automatically pop the head
        
    }
    
    public int top() {
        return head.val;
    }
    
    public int getMin() {
        return head.min;
    }
    
    private class Node {
        int val;
        int min;
        Node next;
        
        private Node(int val, int min, Node next) {
            this.val=val;
            this.min=min;
            this.next=next;
        }
    }
}



/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */