//Take u forward

class Solution {
    public int[][] merge(int[][] intervals) {
        //Take U Forward
        //Merge overlapping intervals
        
        //The intervals are sorted
        //For sorting O(NlogN) for sorting and O(N) for iteration
        
        //Step 1 Sort Intervals
        //Step 2 Iterate over intervals
        //        2.1 check if end of first interval is greater than start of next interval
        //            if yes change the end and move
        //            if no add to result and reassign start and end
        
        List<int[]> res = new ArrayList();
        
        if(intervals.length == 0 || intervals == null){
            return res.toArray(new int[0][]); //return blank array
        }
        
        Arrays.sort(intervals, (a,b) -> a[0] - b[0]);
        
        //Assume [1,3] [2,4]
        int start = intervals[0][0];
        int end = intervals[0][1];
        
        for(int[] i: intervals){
        System.out.println(start + "_" + end);
//Step 1
//start of current less than end of last, update end
            if(i[0] <= end){  
                //if start of the interval is less then or equal end of last interval
                end = Math.max(end, i[1]);
            } else {
//Step 2
//else add
                //whenever we add, we need to move start and end to next interval
                res.add(new int[]{start, end});
                start = i[0];
                end = i[1];
            }
        }
        res.add(new int[]{start, end});
        return res.toArray(new int[0][]);
        
    }
}