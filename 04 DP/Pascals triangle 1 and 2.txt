//PAscals 1
//Nick white, codebix explanation good

//Code bix
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> res = new ArrayList<>();
        if(numRows == 0) return res;
        
        //creating first row
        res.add(new ArrayList<>());
        res.get(0).add(1);
        
        for(int i=1; i<numRows; i++){
            List<Integer> curr = new ArrayList<>();
            curr.add(1);
            
            for(int j=1; j<i; j++){
                curr.add(res.get(i-1).get(j-1) + res.get(i-1).get(j));
            }
            
            curr.add(1);
            res.add(curr);
        }
        
        return res;
    }
}


//Pascals2
//In place modification of the row, to generate next row
//1. add 1, start with first row
//2. for every rowIndex, we would need rowIndex-1 operations to geenrate the row
//To generate the next row
//3. perform each operation from behind/ last of the prev row
//4. set num j = num j + num(j-1)
//5. add 1

//Code bix
class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> res = new ArrayList<>();
        if(rowIndex < 0) return res;
        res.add(1);

//2. for every rowIndex, we would need rowIndex-1 operations

        for(int i=0; i< rowIndex; i++){
//generate next row
//nums j of current row = nums j + nums j-1 (of prev row)
            for(int j=res.size()-1; j>0; j--){
                res.set(j, res.get(j) + res.get(j-1));
            }
//add 1 at last of every new row geenrated
            res.add(1);
        }
        return res;
        
    }
}