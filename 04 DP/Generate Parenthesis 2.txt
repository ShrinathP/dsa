//Check youtube solution by jayati tiwari
//Coding simplified soln
//Check Nick white soln also v good
class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<>();
        backtrackHelper(result, new StringBuilder(), 0, 0, n);
        return result;
        
    }
    
    public void backtrackHelper(List<String> result, StringBuilder str, int open, int closed, int n) {
        //aborting condition
        if(closed > open) {
            return;
        }
        
        if(closed  == open && str.length() == 2*n ){
            result.add(str.toString());
            return;
        }
        
        if(open < n){
            backtrackHelper(result, str.append("("), open + 1, closed, n);
            str.deleteCharAt(str.length() -1);
        }
        
        if(closed < open){
            backtrackHelper(result, str.append(")"), open, closed + 1 , n);
            str.deleteCharAt(str.length() -1);
        }
        
    }
}