/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

//DFS way
//genTreeList is a DFS function
//https://leetcode.com/problems/unique-binary-search-trees-ii/discuss/31494/A-simple-recursive-solution
class Solution {
    public List<TreeNode> generateTrees(int n) {
        return genTreeList(1, n);
        
    }
    
    private List<TreeNode> genTreeList(int start, int end) {
        List<TreeNode> list = new ArrayList<TreeNode>();
        if(start > end){
            list.add(null);
        }
        
        for(int idx = start; idx<= end; idx++) {
            List<TreeNode> leftList = genTreeList(start, idx - 1);
            List<TreeNode> rightList = genTreeList(idx + 1 , end);
            for(TreeNode left: leftList){
                for(TreeNode right: rightList){
                    TreeNode root = new TreeNode(idx);
                    root.left = left;
                    root.right = right;
                    if(root.right != null && root.left != null){
               System.out.println(root.val + "" + root.right.val + "" + root.left.val);
                    }
                    list.add(root);
                }
            }
        }
        return list;
        
    }
}