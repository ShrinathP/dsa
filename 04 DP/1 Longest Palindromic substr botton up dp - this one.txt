
class Solution {
    //TECH dose explanation
    //GFG solution
    public String longestPalindrome(String s) {
        
        //get the length of input string
        int n = s.length();
        
        //create a dp table
        // table[i][j]
        boolean table[][] = new boolean[n][n];
        
        //All substrings of length 1 are palidromes
        int maxLength = 1;
        for(int i=0; i< n; ++i){
            table[i][i] = true;
        }
        
        // check for substring of length 2
        int start = 0;
        for(int i=0; i< n-1; ++i) {
            if(s.charAt(i) == s.charAt(i+1)) {
                table[i][i+1] = true;
                start = i;
                maxLength = 2;
            }
        }
        
        //>2 length
        //Check for lengths greater than 2
        for(int k = 3; k<= n; k++) {
            
            //Fix the starting index
            for(int i=0; i< n-k+1; i++) {
                
                //Get ending index of Substring
                int j=i+k-1;
                
                if(s.charAt(i)==s.charAt(j) && table[i+1][j-1]) {
                    table[i][j] = true;
 
                    if (k > maxLength) {
                        start = i;
                        maxLength = k;
                    }
                    
                }
            }
        }
        
        return s.substring(start, start + maxLength);
        
    }
}