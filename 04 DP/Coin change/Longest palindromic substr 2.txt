class Solution {
    /*GFG Soln
    //DP question
    //1. Fill the dp for i-j lengths <=2 
            * Diagonals first will be true as 0,0; 1,1 same letters are palindrome
            * Also If i and j are same and both are adjacent (j-i <=2) then true
    //2. Iterate for lengths >= 3 and check for condition
    
        str[i] == str[j]
        && dp[i+1][j-1] should be 1 or true (palindrome)
    */
    public String longestPalindrome(String s) {
        if(s == null || s.length()<=1)
            return s;
        int n = s.length();
        int maxLength = 1;
        boolean[][] table = new boolean[n][n];
        String longest = null;
        
        
        
        //All Substring of length 1 are palindromes
        for(int i=0;i<n;i++){
            table[i][i] = true;
            longest = s.substring(i, i+1);
        }
        
        //Check for substrings of length 2
        int start =0;
        for(int i=0;i<n-1;i++){
            if(s.charAt(i) == s.charAt(i+1)){
                table[i][i+1] = true;
                start = i;
                maxLength = 2;
                longest = s.substring(i, i+maxLength);
            }
        }
        
        //Iterate for lengths k=3 to k=n
        for(int k = 3; k<=n; ++k){
            //Fix the starting index
                //Imp you have to add k to i, so max i index should be n-k to avoid                         //ArrayOutOfBounds
            for(int i=0; i<n-k+1; ++i){
                int j = i+k-1;
                System.out.println(j);
                
                if(table[i+1][j-1] && s.charAt(i) == s.charAt(j)){
                    table[i][j] = true;
                    
                    if(k > maxLength){
                        start = i;
                        maxLength = k;
                        longest = s.substring(i, i+k-1);
                    }
                }
            }
        }
        return longest;
        
    }
}