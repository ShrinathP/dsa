//recursive + memo
//Anuj

class Solution {
    //DP 1-D Coin change , Unbounded Knapsack
    //Anuj youtube 
    //https://www.youtube.com/watch?v=-NTaXJ7BBXs
    public int coinChange(int[] coins, int amount) {
        
        int[] dp = new int[amount+1];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        
        int ans = minCoins(amount, coins, dp);
        
        System.out.println(ans);
		
		for(int x: dp) {
			System.out.print(x+" ");
		}
        return ans == Integer.MAX_VALUE ? -1 : ans;
    }
    
    static int minCoins(int total, int[] coins, int[] dp){
        
        if(total==0) return 0;
        
        int ans = Integer.MAX_VALUE;
        
        for(int i=0; i<coins.length; i++){
            if(total-coins[i] >= 0) {
                int subAns = -1;
                
                if(dp[total-coins[i]] != -1){
                    //we already have an answer, i.e. dp filled
                    subAns = dp[total-coins[i]];
                    
                } else {
                    subAns = minCoins(total-coins[i], coins, dp);
                }
                if(subAns != Integer.MAX_VALUE && subAns + 1 < ans){
                    ans = subAns + 1;
                }
            }
        }
        
        //Consider a case when we have input as
        // [2]
        // 3
        return dp[total] = ans;
    }              
    
}
