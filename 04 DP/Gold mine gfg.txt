
//https://www.geeksforgeeks.org/gold-mine-problem/
//Code Library Youtube Channel explanation
//https://www.youtube.com/watch?v=tQU4rkmPyV0

/*
1. Start loop from the 2nd last column
Because there is nothing on the right of the last column
2. Traverse backwards and keep calculating max = max of right, right top, right bottom
3. Save the max in the dp table
4. Keep repeating 2 and 3
5. After whole traversal you have max of sums in first row
6. Iterate first column and find max
*/

CodeLibrary Solution

     public static void main(String []args){
int gold[][]= { {1, 3, 1, 5},
                        {2, 2, 4, 1},
                        {5, 0, 2, 3},
                        {0, 6, 1, 2} };
                         
        int m = 4, n = 4;

//starting from 2nd last column
//editing the same table, instead of using another dp array
for(int col=n-2;col>=0;col--){
	for(int row = 0;row< n; row++){
	int right = gold[row][col+1];
	int right_up = (row == 0)? 0 : gold[row+1][col+1];
	int right_down = (row == m-1) : 0:gold[row+1][col+1];
	gold[row][col] = gold[row][col] +  Math.max(right, Math.max(right_up, right_down));
	}
}

	int res = gold[0][0];
	for(int i=0;i<m;i++){
	res = Mathmax(res, gold[i][0])
	}
return res;

}

///////////////////////////////////////////////////

//GFG solution

import java.util.Arrays;

public class HelloWorld{

/*
Gold Mine problem

Starting from first column
Either can go to right
Or can go right up diagonally
Or can go right down diagonally
*/
     public static void main(String []args){
         int gold[][]= { {1, 3, 1, 5},
                        {2, 2, 4, 1},
                        {5, 0, 2, 3},
                        {0, 6, 1, 2} };
                         
        int m = 4, n = 4;
         
        System.out.print(getMaxGold(gold, m, n));
        
     }
     
     //Returns the max gold that can be collected
     private static int getMaxGold(int[][] gold, int m, int n){
         
         //Create a gold table for storing intermediate results
         
         int[][] goldTable = new int[m][n];
         for(int[] row: goldTable){
             Arrays.fill(row, 0);
         }
         
         //traversing columns and rows
         //colums backwards
         for(int col= n-1; col>=0; col--){
             for(int row=0; row< m; row++){

//if column is last then gold collection is 0

                  // Gold collected on going to
                // the cell on the right(->)
                int right = (col == n-1) ? 0
                        : goldTable[row][col+1];

//if reached right top     
                // Gold collected on going to
                // the cell to right up (/)
                int right_up = (row == 0 ||
                               col == n-1) ? 0 :
                        goldTable[row-1][col+1];
     
                // Gold collected on going to
                // the cell to right down (\)
                int right_down = (row == m-1
                            || col == n-1) ? 0 :
                          goldTable[row+1][col+1];
     
                // Max gold collected from taking
                // either of the above 3 paths
                goldTable[row][col] = gold[row][col]
                 + Math.max(right, Math.max(right_up,
                                       right_down));
             }
         }
         
         // The max amount of gold collected will be
        // the max value in first column of all rows
        int res = goldTable[0][0];
         
        for (int i = 1; i < m; i++)
            res = Math.max(res, goldTable[i][0]);
             
        return res;
         
     }
     
     
}