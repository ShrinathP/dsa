Max amount of non adjacent house robbings
DP solution



//Dynamic Programming
//Kevin Naughton

//Other DP solution
//https://leetcode.com/problems/house-robber/discuss/55761/Java-0ms-solution-using-Dynamic-Programming

//V good non DP soution here:
//https://leetcode.com/problems/house-robber/discuss/55681/Java-O(n)-solution-space-O(1)
class Solution {
    public int rob(int[] nums) {
        
        //Take care of smaller cases
        if(nums == null || nums.length == 0){
            return 0;
        }
        
        if(nums.length == 1){
            return nums[0];
        }
        
        if(nums.length == 2){
            return Math.max(nums[0], nums[1]);
        }
        
        
        //create a dp array which stores
        //the max amount of money you can rob till ith house
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        
        //either the current house + dp till the current house minus 2
        //OR
        //dont rob the current house, get max money till the last robbed house
        for(int i=2; i<dp.length; i++){    
            dp[i] = Math.max(nums[i] + dp[i-2], dp[i-1]);
        }
        
        return dp[nums.length -1];
    }
}