/*
Leetcode 1482 â€“ Minimum Days to Make m Bouquets using binary search on the answer.
ðŸ’¡ Problem Summary:
You're given:

bloomDay[]: days on which each flower blooms.

You need to make m bouquets, each of k consecutive flowers.

ðŸ‘‰ Return the minimum number of days required to make m bouquets.
If it's impossible, return -1.

Process
1. Compute Minimum possible day: min(bloomDay)
2. Maximum possible day: max(bloomDay)
3. For each day, check: Can we make m bouquets by that day? using min and max run binary search
*/


public class Solution {

    public int minDays(int[] bloomDay, int m, int k) {
        int n = bloomDay.length;

        // Total flowers needed is greater, not possible
        if ((long) m * k > n) return -1;

        int low = 1, high = 0;
        for (int day : bloomDay) {
            high = Math.max(high, day);
        }

        int ans = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (canMake(bloomDay, m, k, mid)) {
                ans = mid;
                high = mid - 1;  // try smaller days
            } else {
                low = mid + 1;   // need more days
            }
        }

        return ans;
    }

    // Can we make m bouquets with k flowers by 'days'?
    private boolean canMake(int[] bloomDay, int m, int k, int days) {
        int bouquets = 0, flowers = 0;

        for (int day : bloomDay) {
            if (day <= days) {
                flowers++;
                if (flowers == k) {
                    bouquets++;
                    flowers = 0;
                }
            } else {
                flowers = 0;  // reset if flower hasn't bloomed
            }
        }

        return bouquets >= m;
    }
}
