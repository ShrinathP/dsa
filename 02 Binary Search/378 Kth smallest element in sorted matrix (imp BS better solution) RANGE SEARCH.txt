//https://just4once.gitbooks.io/leetcode-notes/content/leetcode/binary-search/378-kth-smallest-element-in-a-sorted-matrix.html

//Search in Range Solution

class Solution {
    // modified binary searching using median and count
    public int kthSmallest(int[][] matrix, int k) {
        int n= matrix.length;
        int lo = matrix[0][0], hi = matrix[n - 1][n - 1], mid;
        while (lo <= hi) {
            mid = lo + (hi - lo) / 2;
	//COUNT 1
            int count = getCountLessOrEqual(matrix, mid);
            if (count < k) lo = mid + 1;
            else hi = mid - 1;
        }
        return lo;
    }

//COUNT 2
    //without using for loop
    //Similar to Search in 2D matrix ii
    //where were move along the grid
    private int getCountLessOrEqual(int[][] matrix, int val, int n) {
        int i = 0, j = n - 1;
        int res = 0;
        while (i < n) {
            
            //keep moving j back until matrix value become less than val
            //eg val is 12
            //then for
            //matrix = [[1,5,9],[10,11,13],[12,13,15]]
            //we add first row full = 3 nos
            //2nd row j-- as 13 > 12
            //then add 11 and 10 i.e = 2 nos
            while (j >= 0 && matrix[i][j] > val) j--;
            res += j + 1;
            i++;
            //move row down
        }
        return res;
    }

//COUNT 1    
//Traverse Matrix Count another way
    private int getCountLessOrEqual(int[][] matrix, int val){
            int count=0;
            for(int i=0; i<matrix.length; i++){
                for(int j=0; j<matrix[0].length; j++){
                    if(matrix[i][j] <= val){
                        count++;
                    }
                }
            }
            return count;
    }
}