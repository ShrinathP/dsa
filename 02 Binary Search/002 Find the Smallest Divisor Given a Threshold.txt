/*
Given an array nums[] and an integer threshold, return the smallest positive integer divisor such that the sum of ceil(nums[i] / divisor)
across all elements is less than or equal to the threshold.

Why It's "Binary Search on Answer":
You're not searching in the array, you're searching for the smallest possible divisor (an answer) in the range [1, max(nums)].

Properties:
The smaller the divisor, the larger the sum.
The larger the divisor, the smaller the sum.
This is a monotonic function, which is perfect for binary search.

Process:
1. Set search range: low = 1, high = max(nums)
2. For each mid (candidate divisor), calculate the sum:
3. sum += Math.ceil(nums[i] / (double) divisor)
4. If the sum ≤ threshold → try smaller divisor (move left)
5. Else → try larger divisor (move right)

Efficient ceiling algo
======================
For any two positive integers a and b, the formula:
Math.ceil(a / b) == (a + b - 1) / b
* Efficient floor algo
======================
Integer division in Java already gives the floor when both a and b are positive.
No extra trick needed — just use /.
*/

public class Solution {
    public int smallestDivisor(int[] nums, int threshold) {
        int low = 1, high = 0;
    //calculate max for binary search
        for (int num : nums) {
            high = Math.max(high, num);
        }

        int ans = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (getSum(nums, mid) <= threshold) {
                ans = mid;
                high = mid - 1;  // try smaller divisor
            } else {
                low = mid + 1;   // need bigger divisor
            }
        }

        return ans;
    }

    private int getSum(int[] nums, int divisor) {
        int sum = 0;
        for (int num : nums) {
            // efficient ceil(num/divisor)
            sum += (num + divisor - 1) / divisor; 
        }
        return sum;
    }
}
