//cue - Divide by column modulo column , strategy

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        
        //Integers are sorted from left to right
        //IMP * Plus first of each row is greater than last of prev row
        //Take u forward
        //IMP* check the GFG solution as well
        
        //Sol1 - Naive solution
        //Step 1 - Go to each row
        //Step 2 - Do a binary search
        //TC - total of m rows , and BS on n element - So MlogN
        
        //============================================
        //Sol2 - Optimal solution 
        // you can join all the rows and do a BS
        //as every start is greter than prev end
        
        //last index is n*m-1
        //you can find elements from the array using indexes instead of using extra space
        //IMP Divide by column modulo column , strategy
        //Step 1 - lo = 0 , hi = n*m -1
        //Step 2 - Do BS - mid will correspond to mid/m, mid%m
        //TC log2(n*m) , SC- O(1)
        
        if(matrix.length == 0) return false;
        
        int n = matrix.length; //rows n*m
        int m = matrix[0].length;
        
        int lo = 0;
        int hi = n*m -1;
        
        //BS
        while(lo <= hi){
            int mid = lo + ((hi-lo)/2);
            if(matrix[mid/m][mid%m] == target){
                return true;
            }
            if(matrix[mid/m][mid%m] < target){
                lo = mid + 1;
            }
            else{
                hi = mid - 1;
            }
        }
        return false;
    }
}