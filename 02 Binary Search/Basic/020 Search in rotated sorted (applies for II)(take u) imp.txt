
//Solution for Rotated sorted II

/*
âœ… Key Characteristics:
The input array may contain duplicates.
Duplicates make it impossible to determine which half is sorted in some cases (e.g., [2, 2, 2, 3, 4, 2]).
*/

//Only change is the last else where nums[left] matches nums[mid]
class Solution {
    public boolean search(int[] nums, int target) {
        //We will either have left part or right part sorted
        
        //Knowledge Center youtube explanation
        //Code programcreek
        int left =0, right= nums.length-1;
        while(left <= right){
            int mid = left + (right-left)/2;
            if(nums[mid] == target) return true;
            
            //as duplicates are allowed
            //tricky part if left and right both are mid values, we just 
            //increment and decrement pointers
            if(nums[left]==nums[mid] && nums[right] == nums[mid]){left++; right--;}
               
            // ///left part is sorted
            if(nums[left] < nums[mid]){ 
                   if(nums[left] <= target && nums[mid] > target){
                       //target lies in left sorted part
                       right = mid-1;
                   } else {left = mid + 1;}
               } else if (nums[left] > nums[mid]){
                //left part is not sorted
                    if(nums[mid] < target && target<= nums[right]){
                        //target lies in right sorted part
                        left = mid + 1;
                    } else {
                        right = mid-1;
                    }   
               } else {
	//duplicates, we know nums[mid] != target, so nums[start] != target
            //based on current information, we can only move left pointer to skip one cell
            //thus in the worest case, we would have target: 2, and array like 11111111, then
            //the running time would be O(n)
                left++;
            }
        }
        return false;
    }   
}


