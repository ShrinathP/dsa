//Using  lower bound - upper bound
//First Index will be lower bound
//Last Index will be uppper bound - 1, 
//as the upper bound index will be greater than the target
//chatgpt


public class Solution {

    public int[] searchRange(int[] nums, int target) {
        int first = lowerBound(nums, target);
        int last = upperBound(nums, target) - 1;

        // Check if target is not present
        if (first >= nums.length || nums[first] != target) {
            return new int[] {-1, -1};
        }

        return new int[] {first, last};
    }

    // Lower bound: first index where nums[i] >= target
    private int lowerBound(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        int ans = nums.length;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] >= target) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }

    // Upper bound: first index where nums[i] > target
    private int upperBound(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        int ans = nums.length;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (nums[mid] > target) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }
}


