/*
Leetcode 540: Single element in a Sorted Array
 You are given a sorted array where every element appears twice except one element
 which appears once. Find that single element.

Example:
[1, 1, 2, 2, 3, 4, 4, 5, 5]
Answer: 3
*/

//cue == any new element is seen at even index
//BS == if mid is even, compare with next, if mid is odd , compare with prev

//2nd solution
//Take U forward
//As there are 2 copies of each number
//2nd copy will end at odd index
/*
eg
indices
[0,1,2,3,4,5,6]
Given array
[1,1,2,2,3,4,4]


At any point we need to check if the current index is odd or even
if odd -> check if prev instance is the same
if even -> check if next instance is the same

Solution from here:
https://leetcode.com/problems/single-element-in-a-sorted-array/discuss/100754/Java-Binary-Search-short-(7l)-O(log(n))-w-explanations
1st comment

Time complexity O(logN)
Space O(N)
*/
class Solution {
    public int singleNonDuplicate(int[] nums) {
        int lo = 0;
        int hi = nums.length-1;
        while(lo < hi){
            int mid = lo + (hi - lo)/2;
            if(mid % 2 == 0) {
                //mid is even, compare with next
                if(nums[mid] == nums[mid + 1]){
                    //if next is good
                    //move lo to mid + 1s next
                    lo = mid + 2;
                } else {
                    //single number is on left
                    hi = mid;
                }
                
                
            } else {
                //mid is odd
                //check if prev number is 1st instance
                if(nums[mid] == nums[mid -1]){
                    //if prev is good
                    //move lo to mids next
                    lo = mid + 1;
                } else {
                    hi = mid;
                }
            }
        }
        
        return nums[lo];
    }
}