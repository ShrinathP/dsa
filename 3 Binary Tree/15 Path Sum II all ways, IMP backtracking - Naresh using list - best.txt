
//Naresh Gupta
//BackTracking solution
//Move to all paths, keep removing the last added path

//if you pass new ArrayList<Integer>(path) in each left and right recursive call,
//then you dont have to pop
class Solution {
    
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
	    List<List<Integer>> resultList = new ArrayList();
        if (root == null) return resultList;
        pathSumInner(root, sum, new ArrayList<>(), resultList);
        return resultList;
    }
    
    public void pathSumInner(TreeNode root, int sum, List<Integer> path, List<List<Integer>> result) {
        if(root == null)
            return;
        
        path.add(root.val);
        if(root.left == null && root.right == null) {
            if(sum == root.val) result.add(new ArrayList<Integer>(path));
        }
        
        pathSumInner(root.left, sum - root.val, path, result);
        pathSumInner(root.right, sum - root.val, path, result);
        path.remove(path.size() - 1);

//if you pass new ArrayList<Integer>(path) in each left and right recursive call,
//then you dont have to remove

    }
}




  Definition for a binary tree node.
  public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
          this.val = val;
          this.left = left;
          this.right = right;
      }
  }
 





class Solution {
    public ListListInteger pathSum(TreeNode root, int targetSum) {
        ListListInteger result = new ArrayList();
        if(root == null) {return result; }
        dfs(root, new ArrayListInteger(), result, targetSum);
        return result;
        
    }
    
    private static void dfs(TreeNode root, ArrayListInteger path, ListListInteger result, int sum) {
        if(root == null){
            return;
        }
        
        path.add(root.val);
        
        if(root.left == null && root.right == null && sum == root.val){
            result.add(new ArrayList(path));
        }
        
        dfs(root.left, path, result, sum - root.val);
        dfs(root.right, path, result, sum - root.val);
        path.remove(path.size()-1);
    }
}